---
<<<<<<< HEAD
=======
title: "JJRW96.github.io"
author: "JJRW"
>>>>>>> 05c0c7f8e2cc4e7baa4c41ff161fad54de14fadd
format: 
  dashboard:
    expandable: true
    scrolling: true 

theme: 
  - yeti
---


```{r}
<<<<<<< HEAD

=======
# Library und dfs laden
>>>>>>> 05c0c7f8e2cc4e7baa4c41ff161fad54de14fadd
library(plotly)
library(ggplot2)
library(dplyr)
library(tidyr)
library(htmltools)
library(htmlwidgets)
library(shiny)
library(DT)
library(RColorBrewer)
library(patchwork)
library(minpack.lm)
library(zoo)
library(purrr)
library(readxl)

# Laden des DataFrames EPOC_data, Erg_data und BLC_data aus der RDS-Datei
EPOC_data_df <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/EPOC_data_df.rds")
Erg_data_df <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/Erg_data_df.rds")
Erg_data_komplett <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/Erg_data_komplett.rds")
Messwerte_Bedingungen_df <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/Messwerte_Bedingungen_df.rds")
Messwerte_Intensitäten_df <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/Messwerte_Intensitäten_df.rds")
Messwerte_Bedingung_Intensität_df <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/Messwerte_Bedingung_Intensität_df.rds")
Bedingungen_data <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/Bedingungen_data.rds")
P_Ges_df<- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/Efficiency_Daten_df.rds")
Efficiency_df<- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/Efficiency_Daten_df.rds")
P_Int_Drehzahl_Masse <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/P_Int_Drehzahl_Masse.rds")
Simulation_df <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/Simulation_df.rds")
ΔBLC_list <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/BLC_list.rds")
proband_data <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/proband_data.rds")
ΔBLC_data_df <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/BLC_data_df.rds")
BLC_Modell_list <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/BLC_Modell_list.rds")
Efficiency_Daten_df <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/Efficiency_Daten_df.rds")
P_R_list <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/P_R_list.rds")
P_L_list <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/P_L_list.rds")
start_vals_list <- readRDS ("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/start_vals_list.rds")
VO2_list <- readRDS ("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/VO2_list.rds")
df_anthropometrisch_female <- readRDS ("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/df_anthropometrisch_female.rds")
df_anthropometrisch_male <- readRDS ("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/df_anthropometrisch_male.rds")
```

<<<<<<< HEAD

=======
# Informationen Studie
>>>>>>> 05c0c7f8e2cc4e7baa4c41ff161fad54de14fadd
## Row {.flow height=30%}
::: card
::: card-header
Testtag 1
:::
::: card-body
![](Versuchsablauf_Test1_4.png)

> Abbildungen werden in der MA noch angepasst 

:::
:::

::: card
::: card-header
Testtag 2
:::
::: card-body
![](Versuchsablauf_Test2_4.png)

> Abbildungen werden in der MA noch angepasst 

:::
:::

## Row {.flow height=70%}
::: card
::: card-header
Stichprobe
:::
::: card-body

```{r}
# Excel-Datei einlesen
Stichprobe_df <- read_excel("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Daten 2.2.xlsm", sheet = "Stichprobe", range = "A1:Y12", col_names = TRUE)

# Alle Kommas in den Zellen durch Punkte ersetzen
Stichprobe_df <- Stichprobe_df %>% 
  mutate_all(~gsub(",", ".", .))

# Spalten außer der zweiten in numerische Spalten umwandeln
Stichprobe_df <- Stichprobe_df %>% 
  mutate_if(!colnames(.) == colnames(Stichprobe_df)[2], as.numeric)

# Spalten 8, 10, 13, 15, 17, 19, 21 auf zwei Nachkommastellen runden
Stichprobe_df <- Stichprobe_df %>%
  mutate_at(vars(8, 10, 13, 15, 17, 19, 21, 23), ~round(., 2))

# Datentabelle mit DT darstellen
datatable(Stichprobe_df)

```

> Proband 2 und 3 wurden aufgrund fehlender oder schlechter Versuchsdaten entfernt
:::
:::

<<<<<<< HEAD
=======
# Wirkungsgrad

## Bar - und Boxplots {.tabset}

### Datentabelle

```{r}
##### Tabelle außerhalb von Shiny #######

# Angenommene statische Filterkriterien
selectedBedingung <- unique(Bedingungen_data$Bedingung)
selectedIntensität <- unique(Bedingungen_data$Intensität)
selectedProband <- unique(Bedingungen_data$Proband)

# Datenfilterung basierend auf den festgelegten Kriterien
filtered_data <- Bedingungen_data %>%
  filter(Bedingung %in% selectedBedingung,
         Intensität %in% selectedIntensität,
         Proband %in% selectedProband)

# Daten umwandeln und Durchschnittswerte berechnen für die Energiequellen
avg_energy_data <- filtered_data %>%
  group_by(Bedingung, Intensität) %>%
  summarise(
    W_aerob = sprintf("%.1f kJ", round(mean(`W*Aerob [kJ]`, na.rm = TRUE), 1)),
    W_BLC = sprintf("%.1f kJ", round(mean(`WBLC [kJ]`, na.rm = TRUE), 1)),
    W_PCR = sprintf("%.1f kJ", round(mean(`WPCR [kJ]`, na.rm = TRUE), 1)),
    W_TOT = sprintf("%.1f kJ", round(mean(`W*Aerob [kJ]` + `WBLC [kJ]` + `WPCR [kJ]`, na.rm = TRUE), 1)),
    P_mean = sprintf("%.1f Watt", round(mean(P_mean, na.rm = TRUE), 1)),
    P_Int = sprintf("%.1f Watt", round(mean(P_Int, na.rm = TRUE), 1)),
    Drehzahl = sprintf("%.1f rpm", mean(nD, na.rm = TRUE)),
    Wirkungsgrad = sprintf("%.2f%%", 100 * mean(WirkPhysio, na.rm = TRUE)),
    Efficiency = sprintf("%.2f%%", mean(Efficiency, na.rm = TRUE)),
    `Pedal Smoothness` = sprintf("%.2f%%", mean(Pedal_Smoothness, na.rm = TRUE)),
    `P_max` = sprintf("%.1f Watt", mean(P_max, na.rm = TRUE)),
    `%HRmax` = sprintf("%.1f%%", mean(HR_percent, na.rm = TRUE)),
    `%VO2max%` = sprintf("%.1f%%", mean(VO2_percent, na.rm = TRUE)),
    `ΔBLC` = sprintf("%.1f mmol/L", mean(`ΔBLC`, na.rm = TRUE))
  ) %>%
  ungroup()

# Erstellen der Tabelle
datatable(avg_energy_data)
```

### Barplots - Wirkungsgrad

```{r}



#  leicht_sitzen zuerst
sort_with_leicht_sitzen_first <- function(x) {
  leicht_sitzen <- "leicht_sitzen"
  if (leicht_sitzen %in% x) {
    return(c(leicht_sitzen, setdiff(x, leicht_sitzen)))
  }
  return(x)
}

# Angenommen, Sie wollen für alle Bedingungen, Intensitäten und Probanden plotten:
selectedBedingung <- unique(Bedingungen_data$Bedingung)
selectedIntensität <- unique(Bedingungen_data$Intensität)
selectedProband <- unique(Bedingungen_data$Proband)

# Datenfilterung ohne reaktiven Kontext
filtered_data <- Bedingungen_data %>%
  filter(Bedingung %in% selectedBedingung,
         Intensität %in% selectedIntensität,
         Proband %in% selectedProband)

# Berechnen des durchschnittlichen Wirkungsgrads
avg_efficiency_data <- filtered_data %>%
  group_by(Bedingung, Intensität) %>%
  summarize(AvgWirkungsgrad = mean(WirkPhysio, na.rm = TRUE))

# Berechnen der durchschnittlichen Leistung
avg_power_data <- filtered_data %>%
  group_by(Bedingung, Intensität) %>%
  summarize(AvgPTOT = mean(`P_Tot`, na.rm = TRUE))

# Daten umwandeln und Durchschnittswerte berechnen
avg_energy_data <- filtered_data %>%
  gather(Energiequelle, Wert, `W*Aerob [kJ]`, `WPCR [kJ]`, `WBLC [kJ]`) %>%
  group_by(Bedingung, Intensität, Energiequelle) %>%
  summarize(AvgWert = mean(Wert, na.rm = TRUE),
            AvgWTOT = mean(`WTOT [kJ]`, na.rm = TRUE),
            Prozentsatz = (AvgWert / AvgWTOT) * 100)

# Sortierung für die x-Achse
categories <- sort_with_leicht_sitzen_first(unique(interaction(filtered_data$Intensität, filtered_data$Bedingung, sep = "_")))

# Erstellen des Plotly-Diagramms
p <- plot_ly(data = avg_energy_data, 
             x = ~interaction(Intensität, Bedingung, sep = "_"), 
             y = ~AvgWert, 
             color = ~Energiequelle, 
             type = 'bar',
             marker = list(line = list(color = 'black', width = 0.75)),
             colors = c("#42BA97","#F4737A", "#1CADE4"),
             text = ~sprintf("%.1f%%", Prozentsatz),
             textposition = "auto",
             textfont = list(color = "black")
) %>%
  layout(
    title = 'Durchschnittlicher Energieverbrauch der ausgewählten Probanden nach Intensität und Bedingung',
    xaxis = list(title = 'Intensität_Bedingung',
                 categoryorder = "array",
                 categoryarray = categories,
                 showgrid = TRUE,
                 gridcolor = "lightgray",
                 gridwidth = 0.05),
    yaxis = list(title = 'Durchschnittliche Energie [kJ]', tickformat = ",.0f",
                 showgrid = TRUE,
                 gridcolor = "lightgray",
                 gridwidth = 0.05,
                 range = c(0, 520)),
    barmode = 'stack',
    bargap = 0.4,
    margin = list(t = 40) 
  )
# Wirkungsgradbeschriftung (über Summe der Balken)
p <- p %>% 
  layout(annotations = c(
    lapply(1:nrow(avg_efficiency_data), function(i) {
      list(
        x = interaction(avg_efficiency_data$Intensität[i], avg_efficiency_data$Bedingung[i], sep = "_"),
        y = sum(avg_energy_data$AvgWert[
          avg_energy_data$Intensität == avg_efficiency_data$Intensität[i] & 
            avg_energy_data$Bedingung == avg_efficiency_data$Bedingung[i] &
            (avg_energy_data$Energiequelle == "WPCR [kJ]" | 
               avg_energy_data$Energiequelle == "W*Aerob [kJ]" | 
               avg_energy_data$Energiequelle == "WBLC [kJ]")
        ]) + 15,  
        text = sprintf("η = %.3f", avg_efficiency_data$AvgWirkungsgrad[i]),
        showarrow = FALSE,
        yshift = 0,  
        xshift = 0,
        xanchor = "center",
        yanchor = "bottom",
        font = list(size = 12),
        bgcolor = "white",
        bordercolor = "black",
        borderpad = 4
      )
    })
  ))

# Durchschnittliche Leistung beschriften
p <- p %>%
  layout(annotations = c(p$x$layout$annotations,
                         lapply(1:nrow(avg_power_data), function(i) {
                           list(
                             x = interaction(avg_power_data$Intensität[i], avg_power_data$Bedingung[i], sep = "_"),
                             y = 0,  # Positionieren Sie die Annotation direkt über der x-Achse
                             text = sprintf("P<sub>TOT</sub> = %.0f W", avg_power_data$AvgPTOT[i]),
                             showarrow = FALSE,
                             yshift = 0,  # Ändern Sie diese Einstellung, um die vertikale Position anzupassen
                             xshift = 0,
                             xanchor = "center",
                             yanchor = "bottom",
                             font = list(size = 11), # Schriftart, Farbe und Größe anpassen
                             borderpad = 4
                           )
                         })
  ))

# Anzeigen des Plots
p

```

### Boxplots {.tabset}

#### Boxplots_Probanden_Wirkungsgrad

```{r}

# Laden Sie den DataFrame aus der RDS-Datei
Bedingungen_data <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/Bedingungen_data.rds")

# Einzigartige Werte in der Spalte "Proband" ausgeben und sortieren
unique_values <- sort(unique(Bedingungen_data$Proband))
# Erstellen Sie eine neue Spalte 'ProbandNum', die eine fortlaufende Nummerierung für jeden einzigartigen 'Proband' enthält
Bedingungen_data <- Bedingungen_data %>%
  mutate(ProbandNum = as.numeric(factor(Proband)))
# Einzigartige Werte in der neuen Spalte 'ProbandNum' ausgeben und sortieren
unique_values_num <- sort(unique(Bedingungen_data$ProbandNum))
# Farben für die Boxen
box_colors <- colorRampPalette(brewer.pal(10, "Spectral"))(length(unique_values_num))

# Erstellen Sie den Plot mit Plotly
p <- plot_ly(data = Bedingungen_data, x = ~WirkPhysio, y = ~ProbandNum, type = "box", orientation = 'h',
             color = ~factor(Proband), colors = box_colors) %>%
  layout(
    xaxis = list(title = "WirkPhysio"),
    yaxis = list(
      title = "Proband",
      tickvals = unique_values_num,
      ticktext = sort(unique(Bedingungen_data$Proband))
    ),
    margin = list(t = 40),
    showlegend = FALSE,
    title = "Wirkungsgrad der Probanden"  # Hier wird der Titel hinzugefügt
  ) %>%
  config(displayModeBar = FALSE)

# Hinzufügen der Marker
for (i in 1:length(unique_values_num)) {
  p <- p %>%
    add_trace(
      data = subset(Bedingungen_data, ProbandNum == unique_values_num[i]),
      x = ~WirkPhysio,
      y = ~ProbandNum,
      type = "scatter",
      mode = "markers",
      marker = list(
        size = 8,  
        opacity = 1.0, 
        color = box_colors[i],
        symbol = ifelse(Bedingungen_data$Bedingung == "stehen", "star", "circle"), # Symbole für 'stehen'
        line = list(
          width = 0.05  # Dünne Linien für die Symbole
        )
      ),
      text = ~paste("Proband: ", Proband, "<br>WirkPhysio: ", WirkPhysio)
    )
}
# Legende
p <- p %>%
  layout(
    showlegend = FALSE,
    annotations = list(
      list(
        x = 0.99,
        y = 1.0,
        xref = 'paper',
        yref = 'paper',
        text = '<span style="color:darkgray;"><b>  &#9733;</b> Stehen<br><b> &#9711;</b> Sitzen</span>',
        showarrow = FALSE
      )
    )
  )

# Anzeigen des Plots
p



```

#### Boxplots_Wirkungsgrad - Intensität x Bedingung

```{r}
######## Intensität x Bedingung #########
sort_with_leicht_sitzen_first <- function(x) {
  leicht_sitzen <- "leicht_sitzen"
  if (leicht_sitzen %in% x) {
    return(c(leicht_sitzen, setdiff(x, leicht_sitzen)))
  }
  return(x)
}

# Farben definieren 
colors <- case_when(
  interaction(Bedingungen_data$Intensität, Bedingungen_data$Bedingung, sep = "_") == "leicht_sitzen" ~ "#42BA97",
  interaction(Bedingungen_data$Intensität, Bedingungen_data$Bedingung, sep = "_") == "leicht_stehen" ~ "#62A39F",
  interaction(Bedingungen_data$Intensität, Bedingungen_data$Bedingung, sep = "_") == "moderat_sitzen" ~ "#1CADE4",
  interaction(Bedingungen_data$Intensität, Bedingungen_data$Bedingung, sep = "_") == "moderat_stehen" ~ "#2683C6",
  interaction(Bedingungen_data$Intensität, Bedingungen_data$Bedingung, sep = "_") == "schwer_sitzen" ~ "#EF5350",
  interaction(Bedingungen_data$Intensität, Bedingungen_data$Bedingung, sep = "_") == "schwer_stehen" ~ "#C8133B",
  TRUE ~ NA_character_  # Für alle anderen Fälle
)

# Plotly Boxplot erstellen
p2BxI <- plot_ly(data = Bedingungen_data, 
                 x = ~interaction(Intensität, Bedingung, sep = "_"), 
                 y = ~WirkPhysio,
                 type = "box",
                 fillcolor = colors,
                 opacity = 0.8, 
                 line = list(color = "black", width = 0.9),
                 name = ~interaction(Intensität, Bedingung, sep = "_"),
                 boxpoints = "outliers",  
                 pointpos = 0,
                 marker = list(color = "black", size = 4),
                 boxmean = TRUE,  
                 hoverlabel = list(bgcolor = "#F5F5F5")
) %>%
  layout(title = list(
    text = 'Wirkungsgrad nach Bedingung und Intensität',
    x = 0.5,  # Titel zentriert
    xanchor = 'center',  # Ankerpunkt in der Mitte
    yanchor = 'top'  # Ankerpunkt oben
  ),
  margin = list(t = 40),  # Margin von 40 oben
  xaxis = list(title = htmltools::HTML('<b>Intensität_Bedingung</b>'), 
               categoryorder = "array",
               categoryarray = sort_with_leicht_sitzen_first(unique(interaction(Bedingungen_data$Intensität, Bedingungen_data$Bedingung, sep = "_"))),
               showgrid = TRUE,  
               gridcolor = "lightgray",  
               gridwidth = 0.05),  
  yaxis = list(title = htmltools::HTML('<b>Wirkungsgrad</b>'), tickformat = ".3f",
               showgrid = TRUE,  
               gridcolor = "lightgray",  
               gridwidth = 0.05) 
  )
# Diagramm anzeigen
p2BxI

```

#### Boxplots_Wirkungsgrad - Intensitäten

```{r}
######## Intensität #########

# Farben definieren 
colors <- case_when(
  Bedingungen_data$Intensität == "leicht" ~ "#42BA97",
  Bedingungen_data$Intensität == "moderat" ~ "#1CADE4",
  Bedingungen_data$Intensität == "schwer" ~ "#EF5350",
  TRUE ~ NA_character_  # Für alle anderen Fälle
)

# Plotly Boxplot erstellen
p2I <- plot_ly(data = Bedingungen_data, 
               x = ~Intensität, 
               y = ~WirkPhysio,
               type = "box",
               fillcolor = colors,
               opacity = 0.8, 
               line = list(color = "black", width = 0.9),
               name = ~Intensität,
               boxpoints = "outliers",  
               pointpos = 0,
               marker = list(color = "black", size = 4),
               boxmean = TRUE,  
               hoverlabel = list(bgcolor = "#F5F5F5")
) %>%
  layout(title = list(
    text = 'Wirkungsgrad der Probanden nach Intensität',
    x = 0.5,  # Titel zentriert
    xanchor = 'center',  # Ankerpunkt in der Mitte
    yanchor = 'top'  # Ankerpunkt oben
  ),
  margin = list(t = 40),  # Margin von 40 oben
  xaxis = list(title = htmltools::HTML('<b>Intensität</b>'), 
               showgrid = TRUE,  
               gridcolor = "lightgray",  
               gridwidth = 0.05),  
  yaxis = list(title = htmltools::HTML('<b>Wirkungsgrad</b>'), tickformat = ".3f",
               showgrid = TRUE,  
               gridcolor = "lightgray",  
               gridwidth = 0.05)  
  )

# Diagramm anzeigen
p2I


```

#### Boxplots_Wirkungsgrad - Bedingungen

```{r}


######## Bedingung #########
# Farben definieren 
colors <- case_when(
  Bedingungen_data$Bedingung == "sitzen" ~ "#1CADE4",
  Bedingungen_data$Bedingung == "stehen" ~ "#42BA97",
  TRUE ~ NA_character_  # Für alle anderen Fälle
)

# Plotly Boxplot erstellen
p2B <- plot_ly(data = Bedingungen_data, 
               x = ~Bedingung, 
               y = ~WirkPhysio,
               type = "box",
               fillcolor = colors,
               opacity = 0.8, 
               line = list(color = "black", width = 0.9),
               name = ~Bedingung,
               boxpoints = "outliers",  
               pointpos = 0,
               marker = list(color = "black", size = 4),
               boxmean = TRUE,  
               hoverlabel = list(bgcolor = "#F5F5F5")
) %>%
  layout(title = list(
    text = 'Wirkungsgrad der Probanden nach Bedingung',
    x = 0.5,  # Titel zentriert
    xanchor = 'center',  # Ankerpunkt in der Mitte
    yanchor = 'top'  # Ankerpunkt oben
  ),
  margin = list(t = 40),  # Margin von 40 oben
  xaxis = list(title = htmltools::HTML('<b>Bedingung</b>'), 
               showgrid = TRUE,  
               gridcolor = "lightgray",  
               gridwidth = 0.05),  
  yaxis = list(title = htmltools::HTML('<b>Wirkungsgrad</b>'), tickformat = ".3f",
               showgrid = TRUE,  
               gridcolor = "lightgray",  
               gridwidth = 0.05)  
  )

# Diagramm anzeigen
p2B




```

### Regressions - Plots {.tabset}

#### Wirkungsgrad x Watt/kg

```{r}
### WirkPhysio vs. W_kg ###

# Lineare Regression und Modellzusammenfassung
lin_reg <- lm(WirkPhysio ~ W_kg, data = Bedingungen_data)
summary_lin_reg <- summary(lin_reg)
f_stat <- summary_lin_reg$fstatistic
p_value <- format.pval(pf(f_stat["value"], f_stat["numdf"], f_stat["dendf"], lower.tail = FALSE), digits = 4)
equation_text <- sprintf("y = %.2fx + %.2f", coef(lin_reg)["W_kg"], coef(lin_reg)["(Intercept)"])
r_squared_text <- sprintf("R² = %.2f", summary_lin_reg$r.squared)
f_stat_text <- sprintf("F (%d, %d) = %.2f, p = %s", f_stat["numdf"], f_stat["dendf"], f_stat["value"], p_value)

# Berechnung der Regressionsgeraden
w_kg_seq <- seq(min(Bedingungen_data$W_kg), max(Bedingungen_data$W_kg), length.out = 100)
regression_values <- predict(lin_reg, newdata = data.frame(W_kg = w_kg_seq))

# Erstellen des Plotly-Diagramms
plot_ly() %>%
  add_markers(data = Bedingungen_data, x = ~W_kg, y = ~WirkPhysio, type = 'scatter', mode = 'markers',
              color = ~factor(Proband), colors = colorRampPalette(brewer.pal(10,"Spectral"))(20),
              marker = list(size = 9, opacity = 0.8)) %>%
  layout(title = "WirkPhysio vs. W_kg",
         margin = list(t = 40),
         xaxis = list(title = "W_kg"),
         yaxis = list(title = "WirkPhysio")) %>%
  add_lines(x = ~w_kg_seq, y = ~regression_values, name = "Regressionslinie", line = list(color = 'darkgrey', width = 2)) %>%
  add_annotations(text = equation_text, x = min(Bedingungen_data$W_kg), y = max(Bedingungen_data$WirkPhysio), 
                  showarrow = FALSE, xanchor = 'left', yanchor = 'bottom') %>%
  add_annotations(text = r_squared_text, x = min(Bedingungen_data$W_kg), y = max(Bedingungen_data$WirkPhysio) * 0.98, 
                  showarrow = FALSE, xanchor = 'left', yanchor = 'bottom') %>%
  add_annotations(text = f_stat_text, x = min(Bedingungen_data$W_kg), y = max(Bedingungen_data$WirkPhysio) * 0.96, 
                  showarrow = FALSE, xanchor = 'left', yanchor = 'bottom')
```

#### VO2_kg_max x Watt/kg

```{r}
### VO2_kg_max vs. W_kg ###

# Erstellen eines Dataframes mit Durchschnittswerten pro Proband
proband_means <- aggregate(Bedingungen_data[, c("VO2_kg_max", "W_kg")], by = list(Bedingungen_data$Proband), FUN = mean)
names(proband_means) <- c("Proband", "Durchschnitt_VO2_kg_max", "Durchschnitt_W_kg")

# Lineare Regression und Modellzusammenfassung
lin_reg <- lm(Durchschnitt_VO2_kg_max ~ Durchschnitt_W_kg, data = proband_means)
summary_lin_reg <- summary(lin_reg)
f_stat <- summary_lin_reg$fstatistic
p_value <- format.pval(pf(f_stat["value"], f_stat["numdf"], f_stat["dendf"], lower.tail = FALSE), digits = 4)
equation_text <- sprintf("y = %.2fx + %.2f", coef(lin_reg)["Durchschnitt_W_kg"], coef(lin_reg)["(Intercept)"])
r_squared_text <- sprintf("R² = %.2f", summary_lin_reg$r.squared)
f_stat_text <- sprintf("F (%d, %d) = %.2f, p = %s", f_stat["numdf"], f_stat["dendf"], f_stat["value"], p_value)

# Berechnung der Regressionsgeraden
durchschnitt_w_kg_seq <- seq(min(proband_means$Durchschnitt_W_kg), max(proband_means$Durchschnitt_W_kg), length.out = 100)
regression_values <- predict(lin_reg, newdata = data.frame(Durchschnitt_W_kg = durchschnitt_w_kg_seq))

# Erstellen des Plotly-Diagramms
plot_ly() %>%
  add_markers(data = proband_means, x = ~Durchschnitt_W_kg, y = ~Durchschnitt_VO2_kg_max, type = 'scatter', mode = 'markers',
              color = ~factor(Proband), colors = colorRampPalette(brewer.pal(10, "Spectral"))(20),
              marker = list(size = 9, opacity = 0.8)) %>%
  layout(title = "Durchschnitt_VO2_kg_max vs. Durchschnitt_W_kg",
         margin = list(t = 40),
         xaxis = list(title = "Durchschnitt_W_kg"),
         yaxis = list(title = "Durchschnitt_VO2_kg_max")) %>%
  add_lines(x = ~durchschnitt_w_kg_seq, y = ~regression_values, name = "Regressionslinie", line = list(color = 'darkgrey', width = 2)) %>%
  add_annotations(text = equation_text, x = min(proband_means$Durchschnitt_W_kg), y = max(proband_means$Durchschnitt_VO2_kg_max), 
                  showarrow = FALSE, xanchor = 'left', yanchor = 'bottom') %>%
  add_annotations(text = r_squared_text, x = min(proband_means$Durchschnitt_W_kg), y = max(proband_means$Durchschnitt_VO2_kg_max) * 0.98, 
                  showarrow = FALSE, xanchor = 'left', yanchor = 'bottom') %>%
  add_annotations(text = f_stat_text, x = min(proband_means$Durchschnitt_W_kg), y = max(proband_means$Durchschnitt_VO2_kg_max) * 0.96, 
                  showarrow = FALSE, xanchor = 'left', yanchor = 'bottom')
```

# Spiro - Messwerte

## Messwerte im Belastungszeitraum {.tabset}

### Messwerte - Bedingungen {.tabset}

#### VO2, VCO2 & HR

```{r}

# Erstellen des Plotly-Liniendiagramms mit geglätteten Daten und zusätzlichen Features
plot_ly(data = Messwerte_Bedingungen_df, x = ~`t0_s`) %>%
  # VO2, VCO2 und HR für Sitzen - durchgezogene Linien
  add_lines(y = ~VO2_kg_mittel_sitzen_smooth, name = 'V&#775;O<sub>2 Sitzen', 
            line = list(color = '#1CADE4', width = 2)) %>%
  add_lines(y = ~VCO2_kg_mittel_sitzen_smooth, name = 'V&#775;O<sub>2 Sitzen', 
            line = list(color = '#EF5350', width = 2)) %>% 
  add_lines(y = ~HR_mittel_sitzen_smooth, name = "HR<sub>Sitzen", 
            line = list(color = "#42BA97", width = 2), 
            yaxis = "y2") %>%
  # VO2, VCO2 und HR für Stehen - gestrichelte Linien
  add_lines(y = ~VO2_kg_mittel_stehen_smooth, name = 'V&#775;O<sub>2 Stehen', 
            line = list(color = '#2683C6', width = 2, dash = '8 5')) %>%
  add_lines(y = ~VCO2_kg_mittel_stehen_smooth, name = 'V&#775;CO<sub>2 Stehen', 
            line = list(color = '#C8133B', width = 2, dash = '8 5')) %>% 
  add_lines(y = ~HR_mittel_stehen_smooth, name = "HR<sub>Stehen", 
            line = list(color = "#62A39F", width = 2, dash = '8 5'), 
            yaxis = "y2") %>%
  # Senkrechte gestrichelte Linien - ohne Legende
  add_segments(x = 170, xend = 170, y = 0, yend = 300, 
               line = list(color = "darkgrey", dash = "dash", width = 2), 
               yaxis = "y2", showlegend = FALSE) %>%
  add_segments(x = 470, xend = 470, y = 0, yend = 300, 
               line = list(color = "darkgrey", dash = "dash", width = 2), 
               yaxis = "y2", showlegend = FALSE) %>%
  # Textannotationen hinzufügen
  layout(title = "Gleitender Mittelwert der Messwerte beim Sitzen und Stehen",
         margin = list(t = 40),
         xaxis = list(title = "Zeit (s)"),
         yaxis = list(title = "V&#775;O<sub>2</sub> und V&#775;CO<sub>2</sub> [ml · kg · min<sup>-1</sup>]", range = c(0, 80), 
                      tickvals = seq(0, 80, by = 10),  
                      ticktext = seq(0, 80, by = 10)),  
         yaxis2 = list(title = "Herzrate [min<sup>-1</sup>]", overlaying = "y", side = "right", range = c(40, 200),
                       tickvals = seq(40, 200, by = 20),  
                       ticktext = seq(40, 200, by = 20)),  
         legend = list(title = "Legende"),
         annotations = list(
           list(
             x = 320,  # X-Koordinate in der Mitte zwischen 170 und 470
             y = 78,  # Y-Koordinate für "Belastungszeitraum"
             text = "Belastungszeitraum: \nt=300s",
             showarrow = FALSE,
             xref = "x",
             yref = "y",
             font = list(size = 12),
             align = "center"
           )
         )
  )


```

#### AR und VE

```{r}


# Erstellen des Plotly-Liniendiagramms mit geglätteten Daten und zusätzlichen Features
plot_ly(data = Messwerte_Bedingungen_df, x = ~`t0_s`) %>%
  # VE und AR  für Sitzen - durchgezogene Linien
  add_lines(y = ~VE_mittel_sitzen_smooth, name = 'VE<sub>Sitzen', 
            line = list(color = '#80CDC1', width = 2)) %>% 
  add_lines(y = ~AR_mittel_sitzen_smooth, name = "AR<sub>Sitzen", 
            line = list(color = "#D092A7", width = 2), 
            yaxis = "y2") %>%
  # VE und AR  für Stehen - gestrichelte Linien
  add_lines(y = ~VE_mittel_stehen_smooth, name = 'VE<sub>Stehen', 
            line = list(color = '#35978F', width = 2, dash = '8 5')) %>% 
  add_lines(y = ~AR_mittel_stehen_smooth, name = "AR<sub>Stehen", 
            line = list(color = "#9C85C0", width = 2, dash = '8 5'), 
            yaxis = "y2") %>%
  # Senkrechte gestrichelte Linien - ohne Legende
  add_segments(x = 170, xend = 170, y = 0, yend = 300, 
               line = list(color = "darkgrey", dash = "dash", width = 2), 
               yaxis = "y2", showlegend = FALSE) %>%
  add_segments(x = 470, xend = 470, y = 0, yend = 300, 
               line = list(color = "darkgrey", dash = "dash", width = 2), 
               yaxis = "y2", showlegend = FALSE) %>%
  # Textannotationen hinzufügen
  layout(title = "Gleitender Mittelwert der Messwerte beim Sitzen und Stehen",
         margin = list(t = 40),
         xaxis = list(
           title = "Zeit (s)",
           tickvals = seq(0, max(Messwerte_Bedingungen_df$t0_s), by = 100),
           ticktext = seq(0, max(Messwerte_Bedingungen_df$t0_s), by = 100)),
         yaxis = list(title = "VE [l · min<sup>-1</sup>]", range = c(0, 130), 
                      tickvals = seq(0, 130, by = 10),  
                      ticktext = seq(0, 130, by = 10)),  
         yaxis2 = list(title = "AR [min<sup>-1</sup>]", overlaying = "y", side = "right", range = c(0, 65),
                       tickvals = seq(0, 65, by = 5),  
                       ticktext = seq(0, 65, by = 5)),  
         legend = list(title = "Legende"),
         annotations = list(
           list(
             x = 320,  # X-Koordinate in der Mitte zwischen 170 und 470
             y = 10,  # Y-Koordinate für "Belastungszeitraum"
             text = "Belastungszeitraum: \nt=300s",
             showarrow = FALSE,
             xref = "x",
             yref = "y",
             font = list(size = 12),
             align = "center"
           )
         )
  )



```

### Messwerte - Intensitäten {.tabset}

#### Alle Intensitäten

```{r}

# Erstellen des Plotly-Liniendiagramms mit geglätteten Daten und zusätzlichen Features
plot_ly(data = Messwerte_Intensitäten_df, x = ~`t0_s`) %>%
  # VO2, VCO2 und HR für Leicht - durchgezogene Linien
  add_lines(y = ~VO2_kg_mittel_leicht_smooth, name = 'V&#775;O<sub>2 Leicht', 
            line = list(color = '#27CED7', width = 2, dash = '2 3')) %>%
  add_lines(y = ~VCO2_kg_mittel_leicht_smooth, name = 'V&#775;CO<sub>2 Leicht', 
            line = list(color = '#F81B02', width = 2, dash = '2 3')) %>% 
  add_lines(y = ~HR_mittel_leicht_smooth, name = "HR<sub>Leicht", 
            line = list(color = "#C0CF3A", width = 2, dash = '2 3'), 
            yaxis = "y2") %>%
  # VO2, VCO2 und HR für Moderat - gestrichelte Linien
  add_lines(y = ~VO2_kg_mittel_moderat_smooth, name = 'V&#775;O<sub>2 Moderat', 
            line = list(color = '#1CADE4', width = 2, dash = '8 5')) %>%
  add_lines(y = ~VCO2_kg_mittel_moderat_smooth, name = 'V&#775;CO<sub>2 Moderat', 
            line = list(color = '#EF5350', width = 2, dash = '8 5')) %>% 
  add_lines(y = ~HR_mittel_moderat_smooth, name = "HR<sub>Moderat", 
            line = list(color = "#42BA97", width = 2, dash = '8 5'), 
            yaxis = "y2") %>%
  # VO2, VCO2 und HR für Schwer - gepunktete Linien
  add_lines(y = ~VO2_kg_mittel_schwer_smooth, name = 'V&#775;O<sub>2 Schwer', 
            line = list(color = '#2683C6', width = 2)) %>%
  add_lines(y = ~VCO2_kg_mittel_schwer_smooth, name = 'V&#775;CO<sub>2 Schwer', 
            line = list(color = '#C8133B', width = 2)) %>% 
  add_lines(y = ~HR_mittel_schwer_smooth, name = "HR<sub>Schwer", 
            line = list(color = "#62A39F", width = 2), 
            yaxis = "y2") %>%
  # Senkrechte gestrichelte Linien - ohne Legende
  add_segments(x = 170, xend = 170, y = 0, yend = 300, 
               line = list(color = "darkgrey", dash = "dash", width = 2), 
               yaxis = "y2", showlegend = FALSE) %>%
  add_segments(x = 470, xend = 470, y = 0, yend = 300, 
               line = list(color = "darkgrey", dash = "dash", width = 2), 
               yaxis = "y2", showlegend = FALSE) %>%
  # Textannotationen hinzufügen
  layout(title = "Gleitender Mittelwert der Messwerte für Leicht, Moderat und Schwer",
         margin = list(t = 40),
         xaxis = list(
           title = "Zeit (s)",
           tickvals = seq(0, max(Messwerte_Intensitäten_df$t0_s), by = 100),
           ticktext = seq(0, max(Messwerte_Intensitäten_df$t0_s), by = 100)),
         yaxis = list(title = "V&#775;O<sub>2</sub> und V&#775;CO<sub>2</sub> [ml · kg · min<sup>-1</sup>]", range = c(0, 70), 
                      tickvals = seq(0, 70, by = 10),  
                      ticktext = seq(0, 70, by = 10)),  
         yaxis2 = list(title = "Herzrate [min<sup>-1</sup>]", overlaying = "y", side = "right", range = c(100, 240),
                       tickvals = seq(100, 240, by = 20),  
                       ticktext = seq(100, 240, by = 20)),  
         legend = list(title = "Legende"),
         annotations = list(
           list(
             x = 320,  # X-Koordinate in der Mitte zwischen 170 und 470
             y = 78,  # Y-Koordinate für "Belastungszeitraum"
             text = "Belastungszeitraum: \nt=300s",
             showarrow = FALSE,
             xref = "x",
             yref = "y",
             font = list(size = 12),
             align = "center"
           )
         )
  )

```

#### Leicht

```{r}
# Erstellen des Plotly-Liniendiagramms mit geglätteten Daten und zusätzlichen Features
plot_ly(data = Messwerte_Bedingung_Intensität_df, x = ~`t0_s`) %>%
  # VO2, VCO2 und HR für Sitzen Leicht - durchgezogene Linien
  add_lines(y = ~VO2_kg_mittel_sitzen_leicht_smooth, name = 'V&#775;O<sub>2 Sitzen Leicht', 
            line = list(color = '#1CADE4', width = 2)) %>%
  add_lines(y = ~VCO2_kg_mittel_sitzen_leicht_smooth, name = 'V&#775;CO<sub>2 Sitzen Leicht', 
            line = list(color = '#EF5350', width = 2)) %>% 
  add_lines(y = ~HR_mittel_sitzen_leicht_smooth, name = "HR<sub>Sitzen Leicht", 
            line = list(color = "#42BA97", width = 2), 
            yaxis = "y2") %>%
  # VO2, VCO2 und HR für Stehen Leicht - gestrichelte Linien
  add_lines(y = ~VO2_kg_mittel_stehen_leicht_smooth, name = 'V&#775;O<sub>2 Stehen Leicht', 
            line = list(color = '#2683C6', width = 2, dash = '8 5')) %>%
  add_lines(y = ~VCO2_kg_mittel_stehen_leicht_smooth, name = 'V&#775;CO<sub>2 Stehen Leicht', 
            line = list(color = '#C8133B', width = 2, dash = '8 5')) %>% 
  add_lines(y = ~HR_mittel_stehen_leicht_smooth, name = "HR<sub>Stehen Leicht", 
            line = list(color = "#62A39F", width = 2, dash = '8 5'), 
            yaxis = "y2") %>%
  # Senkrechte gestrichelte Linien - ohne Legende
  add_segments(x = 170, xend = 170, y = 0, yend = 300, 
               line = list(color = "darkgrey", dash = "dash", width = 2), 
               yaxis = "y2", showlegend = FALSE) %>%
  add_segments(x = 470, xend = 470, y = 0, yend = 300, 
               line = list(color = "darkgrey", dash = "dash", width = 2), 
               yaxis = "y2", showlegend = FALSE) %>%
  # Textannotationen hinzufügen
  layout(title = "Gleitender Mittelwert der Messwerte beim Sitzen und Stehen (Leicht)",
         margin = list(t = 40),
         xaxis = list(
           title = "Zeit (s)",
           tickvals = seq(0, max(Messwerte_Bedingung_Intensität_df$t0_s), by = 100),
           ticktext = seq(0, max(Messwerte_Bedingung_Intensität_df$t0_s), by = 100)),
         yaxis = list(title = "V&#775;O<sub>2</sub> und V&#775;CO<sub>2</sub> [ml · kg · min<sup>-1</sup>]", range = c(0, 80), 
                      tickvals = seq(0, 80, by = 10),  
                      ticktext = seq(0, 80, by = 10)),  
         yaxis2 = list(title = "Herzrate [min<sup>-1</sup>]", overlaying = "y", side = "right", range = c(40, 200),
                       tickvals = seq(40, 200, by = 20),  
                       ticktext = seq(40, 200, by = 20)),  
         legend = list(title = "Legende"),
         annotations = list(
           list(
             x = 320,  # X-Koordinate in der Mitte zwischen 170 und 470
             y = 78,  # Y-Koordinate für "Belastungszeitraum"
             text = "Belastungszeitraum: \nt=300s",
             showarrow = FALSE,
             xref = "x",
             yref = "y",
             font = list(size = 12),
             align = "center"
           )
         )
  )
```

#### Moderat

```{r}
# Erstellen des Plotly-Liniendiagramms mit geglätteten Daten und zusätzlichen Features
plot_ly(data = Messwerte_Bedingung_Intensität_df, x = ~`t0_s`) %>%
  # VO2, VCO2 und HR für Sitzen Moderat - durchgezogene Linien
  add_lines(y = ~VO2_kg_mittel_sitzen_moderat_smooth, name = 'V&#775;O<sub>2 Sitzen Moderat', 
            line = list(color = '#1CADE4', width = 2)) %>%
  add_lines(y = ~VCO2_kg_mittel_sitzen_moderat_smooth, name = 'V&#775;CO<sub>2 Sitzen Moderat', 
            line = list(color = '#EF5350', width = 2)) %>% 
  add_lines(y = ~HR_mittel_sitzen_moderat_smooth, name = "HR<sub>Sitzen Moderat", 
            line = list(color = "#42BA97", width = 2), 
            yaxis = "y2") %>%
  # VO2, VCO2 und HR für Stehen Moderat - gestrichelte Linien
  add_lines(y = ~VO2_kg_mittel_stehen_moderat_smooth, name = 'V&#775;O<sub>2 Stehen Moderat', 
            line = list(color = '#2683C6', width = 2, dash = '8 5')) %>%
  add_lines(y = ~VCO2_kg_mittel_stehen_moderat_smooth, name = 'V&#775;CO<sub>2 Stehen Moderat', 
            line = list(color = '#C8133B', width = 2, dash = '8 5')) %>% 
  add_lines(y = ~HR_mittel_stehen_moderat_smooth, name = "HR<sub>Stehen Moderat", 
            line = list(color = "#62A39F", width = 2, dash = '8 5'), 
            yaxis = "y2") %>%
  # Senkrechte gestrichelte Linien - ohne Legende
  add_segments(x = 170, xend = 170, y = 0, yend = 300, 
               line = list(color = "darkgrey", dash = "dash", width = 2), 
               yaxis = "y2", showlegend = FALSE) %>%
  add_segments(x = 470, xend = 470, y = 0, yend = 300, 
               line = list(color = "darkgrey", dash = "dash", width = 2), 
               yaxis = "y2", showlegend = FALSE) %>%
  # Textannotationen hinzufügen
  layout(title = "Gleitender Mittelwert der Messwerte beim Sitzen und Stehen (Moderat)",
         margin = list(t = 40),
         xaxis = list(
           title = "Zeit (s)",
           tickvals = seq(0, max(Messwerte_Bedingung_Intensität_df$t0_s), by = 100),
           ticktext = seq(0, max(Messwerte_Bedingung_Intensität_df$t0_s), by = 100)),
         yaxis = list(title = "V&#775;O<sub>2</sub> und V&#775;CO<sub>2</sub> [ml · kg · min<sup>-1</sup>]", range = c(0, 80), 
                      tickvals = seq(0, 80, by = 10),  
                      ticktext = seq(0, 80, by = 10)),  
         yaxis2 = list(title = "Herzrate [min<sup>-1</sup>]", overlaying = "y", side = "right", range = c(40, 200),
                       tickvals = seq(40, 200, by = 20),  
                       ticktext = seq(40, 200, by = 20)),  
         legend = list(title = "Legende"),
         annotations = list(
           list(
             x = 320,  # X-Koordinate in der Mitte zwischen 170 und 470
             y = 78,  # Y-Koordinate für "Belastungszeitraum"
             text = "Belastungszeitraum: \nt=300s",
             showarrow = FALSE,
             xref = "x",
             yref = "y",
             font = list(size = 12),
             align = "center"
           )
         )
  )
```

#### Schwer

```{r}
# Erstellen des Plotly-Liniendiagramms mit geglätteten Daten und zusätzlichen Features
plot_ly(data = Messwerte_Bedingung_Intensität_df, x = ~`t0_s`) %>%
  # VO2, VCO2 und HR für Sitzen Schwer - durchgezogene Linien
  add_lines(y = ~VO2_kg_mittel_sitzen_schwer_smooth, name = 'V&#775;O<sub>2 Sitzen Schwer', 
            line = list(color = '#1CADE4', width = 2)) %>%
  add_lines(y = ~VCO2_kg_mittel_sitzen_schwer_smooth, name = 'V&#775;CO<sub>2 Sitzen Schwer', 
            line = list(color = '#EF5350', width = 2)) %>% 
  add_lines(y = ~HR_mittel_sitzen_schwer_smooth, name = "HR<sub>Sitzen Schwer", 
            line = list(color = "#42BA97", width = 2), 
            yaxis = "y2") %>%
  # VO2, VCO2 und HR für Stehen Schwer - gestrichelte Linien
  add_lines(y = ~VO2_kg_mittel_stehen_schwer_smooth, name = 'V&#775;O<sub>2 Stehen Schwer', 
            line = list(color = '#2683C6', width = 2, dash = '8 5')) %>%
  add_lines(y = ~VCO2_kg_mittel_stehen_schwer_smooth, name = 'V&#775;CO<sub>2 Stehen Schwer', 
            line = list(color = '#C8133B', width = 2, dash = '8 5')) %>% 
  add_lines(y = ~HR_mittel_stehen_schwer_smooth, name = "HR<sub>Stehen Schwer", 
            line = list(color = "#62A39F", width = 2, dash = '8 5'), 
            yaxis = "y2") %>%
  # Senkrechte gestrichelte Linien - ohne Legende
  add_segments(x = 170, xend = 170, y = 0, yend = 300, 
               line = list(color = "darkgrey", dash = "dash", width = 2), 
               yaxis = "y2", showlegend = FALSE) %>%
  add_segments(x = 470, xend = 470, y = 0, yend = 300, 
               line = list(color = "darkgrey", dash = "dash", width = 2), 
               yaxis = "y2", showlegend = FALSE) %>%
  # Textannotationen hinzufügen
  layout(title = "Gleitender Mittelwert der Messwerte beim Sitzen und Stehen (Schwer)",
         margin = list(t = 40),
         xaxis = list(
           title = "Zeit (s)",
           tickvals = seq(0, max(Messwerte_Bedingung_Intensität_df$t0_s), by = 100),
           ticktext = seq(0, max(Messwerte_Bedingung_Intensität_df$t0_s), by = 100)),
         yaxis = list(title = "V&#775;O<sub>2</sub> und V&#775;CO<sub>2</sub> [ml · kg · min<sup>-1</sup>]", range = c(0, 80), 
                      tickvals = seq(0, 80, by = 10),  
                      ticktext = seq(0, 80, by = 10)),  
         yaxis2 = list(title = "Herzrate [min<sup>-1</sup>]", overlaying = "y", side = "right", range = c(40, 200),
                       tickvals = seq(40, 200, by = 20),  
                       ticktext = seq(40, 200, by = 20)),  
         legend = list(title = "Legende"),
         annotations = list(
           list(
             x = 320,  # X-Koordinate in der Mitte zwischen 170 und 470
             y = 78,  # Y-Koordinate für "Belastungszeitraum"
             text = "Belastungszeitraum: \nt=300s",
             showarrow = FALSE,
             xref = "x",
             yref = "y",
             font = list(size = 12),
             align = "center"
           )
         )
  )
```

# EPOC - Daten

## EPOC - Modelle der verschiedenen Probanden {.tabset}

### Proband 01 {.tabset}

#### Test 1

![](01_1.svg)

#### Test 2

![](01_2.svg)

#### Test 3

![](01_3.svg)

#### Test 4

![](01_4.svg)

#### Test 5

![](01_5.svg)

#### Test 6

![](01_6.svg)

### Proband 06 {.tabset}

#### Test 1

![](06_1.svg)

#### Test 2

![](06_2.svg)

#### Test 3

![](06_3.svg)

#### Test 4

![](06_4.svg)

#### Test 5

![](06_5.svg)

#### Test 6

![](06_6.svg)

### Proband 10 {.tabset}

#### Test 1

![](10_1.svg)

#### Test 2

![](10_2.svg)

#### Test 3

![](10_3.svg)

#### Test 4

![](10_4.svg)

#### Test 5

![](10_5.svg)

#### Test 6

![](10_6.svg)

### Proband 13 {.tabset}

#### Test 1

![](13_1.svg)

#### Test 2

![](13_2.svg)

#### Test 3

![](13_3.svg)

#### Test 4

![](13_4.svg)

#### Test 5

![](13_5.svg)

#### Test 6

![](13_6.svg)

### Proband 15 {.tabset}

#### Test 1

![](15_1.svg)

#### Test 2

![](15_2.svg)

#### Test 3

![](15_3.svg)

#### Test 4

![](15_4.svg)

#### Test 5

![](15_5.svg)

#### Test 6

![](15_6.svg)

### Proband 19 {.tabset}

#### Test 1

![](19_1.svg)

#### Test 2

![](19_2.svg)

#### Test 3

![](19_3.svg)

#### Test 4

![](19_4.svg)

#### Test 5

![](19_5.svg)

#### Test 6

![](19_6.svg)

### Proband 20 {.tabset}

#### Test 1

![](20_1.svg)

#### Test 2

![](20_2.svg)

#### Test 3

![](20_3.svg)

#### Test 4

![](20_4.svg)

#### Test 5

![](20_5.svg)

#### Test 6

![](20_6.svg)

### Proband 22 {.tabset}

#### Test 1

![](22_1.svg)

#### Test 2

![](22_2.svg)

#### Test 3

![](22_3.svg)

#### Test 4

![](22_4.svg)

#### Test 5

![](22_5.svg)

#### Test 6

![](22_6.svg)

### Proband 23 {.tabset}

![](23_1.svg)

#### Test 2

![](23_2.svg)

#### Test 3

![](23_3.svg)

#### Test 4

![](23_4.svg)

#### Test 5

![](23_5.svg)

#### Test 6

![](23_6.svg)

# Ergometer - Daten

## Messwerte im Belastungszeitraum {.tabset}

### Innere Arbeit {.tabset}

#### Anthropometrische Tabellen
##### Row {.flow}
::: card 
::: card-header 
Weiblich
:::
::: card-body 

```{r}

# Nachkommastellen runden
df_anthropometrisch_female <- df_anthropometrisch_female %>%
  mutate_at(vars(everything()), round, 2)

# Datentabelle mit DT darstellen
datatable(df_anthropometrisch_female)

```

:::
:::

##### Row {.flow}
::: card 
::: card-header 
Männlich
:::
::: card-body 


```{r}
# Nachkommstellen runden
df_anthropometrisch_male <- df_anthropometrisch_male %>%
  mutate_at(vars(everything()), round, 2)

# Datentabelle mit DT darstellen
datatable(df_anthropometrisch_male)
```

:::
:::

#### Rechenweg 
##### Row {.flow}

::: card 
::: card-header 
Rechenweg
:::
::: card-body 

```{r echo=TRUE} 

# ------------ Berechnungen_P_Int ----------
# ------------ Eingabeparameter ------------ 
# Schleife über alle Zeilen in Erg_data_df
for(i in 1:nrow(Erg_data_df)) {
  # Übernahme der Werte aus der aktuellen Zeile...
  Masse <- as.numeric(Erg_data_df[i, 'Masse'])
  lOS <- as.numeric(Erg_data_df[i, 'lOS'])
  lUS <- as.numeric(Erg_data_df[i, 'lUS'])
  lBein <- as.numeric(Erg_data_df[i, 'lBein'])
  lKurbel <- as.numeric(Erg_data_df[i, 'lKurbel'])
  uOS <- as.numeric(Erg_data_df[i, 'uOS'])
  uUS <- as.numeric(Erg_data_df[i, 'uUS'])
  nD <- as.numeric(Erg_data_df[i, 'nD'])
  Testdauer <- 300

  # Konstanten und weitere Berechnungen
  Faktor <- 1.00 # Faktor zur Anpassung des Abstandes vom Hüftgelenk zur Kurbelachse
  S <- lBein * 0.883 * Faktor # Abstand vom Hüftgelenk zur Kurbelachse - Lemond Methode
  P3x <- -0.150 # x-Koordinate von P3 (Oberflächenrepräsentant der Hüfte) [m]
  P3y <- sqrt((S^2)-(P3x^2)) # y-Koordinate von P3 (Oberflächenrepräsentant der Hüfte) [m]
  P3 <- c(P3x,P3y) # kartesische Koordinaten P3 (Oberflächenrepräsentant der Hüfte) [m]
  rRelOS <- 0.1416 # relative Segmentmasse OS
  rRelUS <- 0.0433 # relative Segmentmasse US
  lambdaOS <- 0.4095 # Abstand zw. dem proximalen Punkt des Oberschenkelsegments und dessen Schwerpunkt
  lambdaUS <- 0.4459 # Abstand proximaler Segmentpunkt - Schwerpunkt
  thetaKurbel <- 0.002 # Trägheitsmoment der Fahrradkurbel [kg m^2]
  n <- 360 # Anzahl Messwerte pro Umdrehung
  delta_t <- 60 / (n * nD) # Zeitintervalle
  T <- 60 / nD # Periodendauer einer Umdrehung
  omega <- 2 * pi * nD / 60 # mittlere Winkelgeschwindigkeit
  
  # Segmentmasse OS und US [kg]
  mOS <- Masse * rRelOS 
  mUS <- Masse * rRelUS 
  
  # Trägheitsmoment des Segments [kg m^2]
  thetaOS <- (1/4) * mOS * (uOS / (2 * pi))^2 + (1/12) * mOS * lOS^2
  thetaUS <- (1/4) * mUS * (uUS / (2 * pi))^2 + (1/12) * mUS * lUS^2
  
  # Winkel und Geschwindigkeiten berechnen
  delta_phi1 <- 2 * pi / n # Winkelintervalle
  phi1 <- seq(0, 2 * pi, by=delta_phi1) # Erstellung von Winkelintervallen für eine komplette Umdrehung
  phi1 <- phi1[-length(phi1)]  # Entfernt das letzte Element
  time <- seq(0, T, by=delta_t) # Erstellung von Zeitintervallen für eine komplette Umdrehung
  time <- time[-length(time)]  # Entfernt das letzte Element
  
  # Berechnung der kartesischen Koordinaten von Punkt P1 in Abhängigkeit von der Zeit
  P1 <- list(lKurbel * sin(phi1), lKurbel * cos(phi1))
  
  # Abstand vom Hüftgelenk zur Kurbelachse (0,0) berechnen
  G4 <- sqrt(sum(P3^2))
  
  # Berechnung des Winkels des Gestänges
  delta <- acos(P3[2] / S)
  
  # Berechnung der Länge des Verbindungssegments zw. Kurbel und Hüftgelenk > 'c' kann nicht kürzer als die Summe der Längen der Beinsegmente sein
  c <- sqrt(lKurbel^2 + S^2 - 2 * S * lKurbel * cos(phi1 + delta))
  
  # Schleife zur Anpassung des Faktors, falls c größer als die Summe der Segmentlängen ist
  while (any(lUS + lOS < c)) {
    Faktor <- Faktor - 0.01  # Verringere den Faktor um 0.01
    S <- lBein * 0.883 * Faktor  # Neuberechnung von S
    P3y <- sqrt((S^2) - (P3x^2))  # Neuberechnung von P3y
    P3 <- c(P3x, P3y)  # Neuberechnung von P3
    delta <- acos(P3[2] / S)  # Neuberechnung von delta
    c <- sqrt(lKurbel^2 + S^2 - 2 * S * lKurbel * cos(phi1 + delta))  # Neuberechnung von c
  }
  
  # Überprüfung, ob die Segmentlängen zusammen größer sind als die berechnete Länge c
  control <- sum(ifelse(lUS + lOS <= c, 1, 0))
  
  # Speichere den verwendeten Faktor in der Spalte 'Faktor_Used'
  Erg_data_df$Faktor_Used[i] <- Faktor
  
  # Winkelberechnungen für das Beinsegment    
  alpha <- asin(lKurbel * sin(phi1 + delta) / c) # Winkel zwischen Gestell und c (Verbindungsseg. zwischen Kurbel und Hüftgelenk )               
  beta <- acos((lOS^2 + c^2 - lUS^2) / (2 * lOS * c)) # Winkel zwischen Oberschenkel und L       
  
  # Berechnung der kartesischen Koordinaten von Punkt P2 in Abhängigkeit von der Zeit
  P2 <- list(P3[1] + lOS * cos(pi/2 - (alpha + beta + delta)),
             P3[2] - lOS * sin(pi/2 - (alpha + beta + delta)))
  
  # Winkelberechnungen zwischen den Segmentpunkten
  phi2 <- acos((P2[[1]] - P1[[1]]) / lUS)
  phi3 <- acos((P3[2] - P2[[2]]) / lOS)
  
  # Berechnung der kartesischen Koordinaten der Schwerpunkte der Oberschenkel- und Unterschenkelsegmente
  SpOS <- list(P3[1] - lambdaOS * (P3[1] - P2[[1]]), 
               P3[2] - lambdaOS * (P3[2] - P2[[2]]))
  SpUS <- list(P2[[1]] - lambdaUS * (P2[[1]] - P1[[1]]), 
               P2[[2]] - lambdaUS * (P2[[2]] - P1[[2]]))
  
  # Funktion zur Berechnung der Geschwindigkeit
  berechneGeschwindigkeit <- function(Sp, delta_t) {
    diff_x <- c(diff(Sp[[1]]), Sp[[1]][1] - Sp[[1]][length(Sp[[1]])])
    diff_y <- c(diff(Sp[[2]]), Sp[[2]][1] - Sp[[2]][length(Sp[[2]])])
    return(sqrt(diff_x^2 + diff_y^2) / delta_t)
  }
  
  # Anwenden der Funktion
  vOS <- berechneGeschwindigkeit(SpOS, delta_t)
  vUS <- berechneGeschwindigkeit(SpUS, delta_t)
  
  # Berechnung der translatorischen kinetischen Energie
  Ekin_trans <- 0.5 * (mOS * vOS^2 + mUS * vUS^2)
  
  # Delta der Winkelgeschwindigkeiten für zyklische Bewegung
  delta_phi2 <- c(diff(phi2), phi2[1] - phi2[length(phi2)])
  delta_phi3 <- c(diff(phi3), phi3[1] - phi3[length(phi3)])
  
  # Berechnung der Winkelgeschwindigkeiten der Schwerpunkte von Oberschenkel- und Unterschenkel
  omega_SpOS <- delta_phi2 / delta_t
  omega_SpUS <- delta_phi3 / delta_t
  omega_Kurbel <- delta_phi1 / delta_t
  
  # Trägheitsmoment des Segments (Vollzylinder, der um eine Querachse (zweizählige Symmetrieachse) rotiert) [kg m^2]
  thetaOS <- (1/4) * mOS * (uOS / (2 * pi))^2 + (1/12) * mOS * lOS^2
  thetaUS <- (1/4) * mUS * (uUS / (2 * pi))^2 + (1/12) * mUS * lUS^2
  
  # Berechnung der rotatorischen kinetischen Energie
  Ekin_rot <- 0.5 * (thetaOS * omega_SpOS^2 + thetaUS * omega_SpUS^2 + thetaKurbel * omega_Kurbel^2)
  
  # Delta der kinetischen Energie (translatorisch) für zyklische Bewegung
  delta_Ekin_trans <- c(abs(diff(Ekin_trans)), abs(Ekin_trans[1] - Ekin_trans[length(Ekin_trans)]))
  
  # Delta der kinetischen Energie (rotatorisch) für zyklische Bewegung
  delta_Ekin_rot <- c(abs(diff(Ekin_rot)), abs(Ekin_rot[1] - Ekin_rot[length(Ekin_rot)]))
  
  # Berechnung der internen Leistung für die aktuelle Drehzahl und Masse
  PInt_Mittel_Zyklus_kJ <- mean(delta_Ekin_rot) + mean(delta_Ekin_trans) / mean(delta_t)
  PInt_Ges_Watt <- PInt_Mittel_Zyklus_kJ / 1000 * Testdauer
  
  # Berechnen Sie PInt_Ges_Watt für die aktuelle Zeile und speichern Sie es im DataFrame
  Erg_data_df$PInt_Ges_Watt[i] <- PInt_Ges_Watt
}

```

:::
:::

#### Innere Arbeit 

```{r}
# Daten nach Proband und Nr sortieren
Erg_data_komplett <- Erg_data_komplett %>%
  arrange(Proband, Nr)

# Diagramm erstellen ohne explizite Farbskala
plot <- plot_ly(data = Erg_data_komplett, x = ~nD, y = ~PInt_Ges_Watt, color = ~factor(Proband),colors = colorRampPalette(brewer.pal(10,"Spectral"))(20), legendgroup = ~Proband) %>%
  add_markers(showlegend = FALSE) %>%
  layout(
    margin = list(t = 40), 
    xaxis = list(title = "nD"),
    yaxis = list(title = "P_Int_Ges_Watt"),
    title = "Berechnete Innere Arbeit",
    showlegend = TRUE  # Legende hinzufügen
  )
# Legende für die Farben der Probanden hinzufügen
for (proband_id in unique(Erg_data_komplett$Proband)) {
  plot <- plot %>% add_trace(
    data = subset(Erg_data_komplett, Proband == proband_id),
    x = ~nD,
    y = ~PInt_Ges_Watt,
    type = "scatter",
    mode = "markers",  # Nur Marker anzeigen, keine Linien
    marker = list(size = 9),
    name = paste("Proband", proband_id)
  )
}
# Diagramm anzeigen
plot


```

#### Innere Arbeit - Minetti

```{r}
# Diagramm erstellen für P_Int_Min
plot <- plot_ly(data = Erg_data_komplett, x = ~nD, y = ~P_Int_Min, color = ~factor(Proband),colors = colorRampPalette(brewer.pal(10,"Spectral"))(20), legendgroup = ~Proband) %>%
  add_markers(showlegend = FALSE) %>%
  layout(
    margin = list(t = 40), 
    xaxis = list(title = "nD"),
    yaxis = list(title = "P_Int_Min"),
    title = "Innere Arbeit nach Minetti",
    showlegend = TRUE  # Legende hinzufügen
  )
# Legende für die Farben der Probanden hinzufügen
for (proband_id in unique(Erg_data_komplett$Proband)) {
  plot <- plot %>% add_trace(
    data = subset(Erg_data_komplett, Proband == proband_id),
    x = ~nD,
    y = ~P_Int_Min,
    type = "scatter",
    mode = "markers",  # Nur Marker anzeigen, keine Linien
    marker = list(size = 9),
    name = paste("Proband", proband_id)
  )
}
# Diagramm anzeigen
plot

```

#### Innere Arbeit für versch. Körpermassen

```{r}

# Verwenden Sie direkt den DataFrame PInt_Drehzahl_Masse für das Diagramm
p <- plot_ly(P_Int_Drehzahl_Masse, x = ~Drehzahl, y = ~PInt_Ges_Watt, color = ~factor(Masse),colors = colorRampPalette(brewer.pal(10,"Spectral"))(20), type = 'scatter', mode = 'lines+markers',
             line = list(dash = 'dash'), marker = list(size = 7)) %>%
  layout(title = "P_int für verschiedene Masse- und Drehzahlwerte",
         margin = list(t = 40),
         xaxis = list(title = "Drehzahl"),
         yaxis = list(title = "P_int_Watt"))
# Diagramm anzeigen
p

```

#### Innere Arbeit für versch. Körpermassen (Minetti)

```{r}
# Daten für verschiedene Massewerte erstellen
masse_values <- seq(40, 120, by = 10)
full_data <- expand.grid(Masse = masse_values, Drehzahl = seq(40, 200, by = 5))
full_data$q <- 0.153
full_data$Testdauer <- 300

# Berechnungen durchführen
full_data <- full_data %>%
  mutate(
    Drehzahl_Hz = Drehzahl / 60,
    Umdrehungen_ges = Drehzahl_Hz * Testdauer,
    Wint_Umdrehung = q * Masse * (Drehzahl_Hz^2),
    Wint_ges_kJ = Wint_Umdrehung * Umdrehungen_ges / 1000,
    P_int_Watt = Wint_ges_kJ * 1000 / Testdauer
  )

# Plotly-Diagramm erstellen
p <- plot_ly(full_data, x = ~Drehzahl, y = ~P_int_Watt, color = ~factor(Masse), colors = colorRampPalette(brewer.pal(10,"Spectral"))(20), type = 'scatter', mode = 'lines+markers',
             line = list(dash = 'dash'), marker = list(size = 7)) %>%
  layout(title = "P_Int_Minetti für verschiedene Massewerte",
         margin = list(t = 40), 
         xaxis = list(title = "Drehzahl"),
         yaxis = list(title = "P_int_Watt"))


# Diagramm anzeigen
p
```

### Efficiency {.tabset}

#### Berechnung

![Berechnung der Torque Efficiency](Torque_Efficiency.png)

#### Tangentialleistung/kg - Verlauf {.tabset}

##### Alle Bed x Int

![](P_komplett.png)

##### Leicht x Sitzen

![](P_leicht_sitzen.png)

##### Leicht x Stehen

![](P_leicht_stehen.png)

##### Moderat x Sitzen

![](P_moderat_sitzen.png)

##### Moderat x Stehen

![](P_moderat_stehen.png)

##### Schwer x Sitzen

![](P_schwer_sitzen.png)

##### Schwer x Sitzen

![](P_schwer_stehen.png) 

#### Kreisdiagramme {.tabset}

##### Bedingungen

```{r}
# Gruppieren und Durchschnitt berechnen, Einträge mit Intensität = "niedrig" ignorieren
Efficiency_Bed_df <- Efficiency_Daten_df %>%
  group_by(Bedingung) %>%
  summarise(Efficiency = round(mean(Efficiency, na.rm = TRUE), 2)) %>%
  mutate(condition = paste(Bedingung))

# Leere Liste für die Durchschnittswerte erstellen
Bedingung_list_L <- list()
Bedingung_list_R <- list()

# Initialisiere die Durchschnittswerte für "stehen" und "sitzen"
mean_stehen_L <- numeric(180)
mean_sitzen_L <- numeric(180)
mean_stehen_R <- numeric(180)
mean_sitzen_R <- numeric(180)

# Iteriere über die Namen in P_L_list
for (name in names(P_L_list)) {
  # Prüfe, ob "stehen" im Namen vorkommt
  if (grepl("stehen", name)) {
    # Addiere den Eintrag zu mean_stehen_L
    mean_stehen_L <- mean_stehen_L + P_L_list[[name]]
  }
  # Prüfe, ob "sitzen" im Namen vorkommt
  if (grepl("sitzen", name)) {
    # Addiere den Eintrag zu mean_sitzen_L
    mean_sitzen_L <- mean_sitzen_L + P_L_list[[name]]
  }
}

# Iteriere über die Namen in P_R_list
for (name in names(P_R_list)) {
  # Prüfe, ob "stehen" im Namen vorkommt
  if (grepl("stehen", name)) {
    # Addiere den Eintrag zu mean_stehen_R
    mean_stehen_R <- mean_stehen_R + P_R_list[[name]]
  }
  # Prüfe, ob "sitzen" im Namen vorkommt
  if (grepl("sitzen", name)) {
    # Addiere den Eintrag zu mean_sitzen_R
    mean_sitzen_R <- mean_sitzen_R + P_R_list[[name]]
  }
}

# Berechne den Durchschnitt für "stehen" und "sitzen" über alle Datenpunkte
Bedingung_list_L[["stehen"]] <- mean_stehen_L / sum(grepl("stehen", names(P_L_list)))
Bedingung_list_L[["sitzen"]] <- mean_sitzen_L / sum(grepl("sitzen", names(P_L_list)))

Bedingung_list_R[["stehen"]] <- mean_stehen_R / sum(grepl("stehen", names(P_R_list)))
Bedingung_list_R[["sitzen"]] <- mean_sitzen_R / sum(grepl("sitzen", names(P_R_list)))

# Winkeldaten definieren
Winkeldaten <- seq(0, 358, by = 2)
efficiency_values <- Efficiency_Bed_df$Efficiency
names(efficiency_values) <- Efficiency_Bed_df$condition

# Schleife über die Bedingungen ("stehen" und "sitzen")
plots <- list()
for (condition in c("stehen", "sitzen")) {
  values_L <- Bedingung_list_L[[condition]]
  values_R <- Bedingung_list_R[[condition]]
  values_avg <- rowMeans(data.frame(P_R = values_R, P_L = values_L))
  adjusted_Winkeldaten <- (Winkeldaten + 180) %% 360
  
  # Vorbereitung der Datenrahmen für das Plotten
  data_L <- data.frame(theta = adjusted_Winkeldaten, r = values_L)
  data_R <- data.frame(theta = Winkeldaten, r = values_R)
  merged_data <- merge(data_L[c("theta", "r")], data_R[c("theta", "r")], by = "theta", all = FALSE)
  
  # Berechnung und Anpassung der Daten für das Plotten
  merged_data$r_avg <- rowMeans(merged_data[c("r.x", "r.y")])
  merged_data$r_avg <- ifelse(merged_data$r_avg >= 0, merged_data$r_avg + 1200, merged_data$r_avg - 1200)
  merged_data$color <- ifelse(merged_data$r_avg > 0, "#42BA97", "#EF5350")
  
  data_avg <- data.frame(theta = Winkeldaten, r = abs(merged_data$r_avg), color = merged_data$color)
  data_avg$Baseline <- 1200
  
  # Erstellung des Plots für die aktuelle Bedingung
  plot <- ggplot(data_avg, aes(x = theta, y = r, fill = color)) +
    geom_ribbon(aes(ymin = Baseline, ymax = r), alpha = 0.5) +
    geom_line(aes(color = color), size = 0.8) +
    geom_hline(yintercept = 1200, linetype = "solid", color = "black", size = 0.8) +
    scale_colour_manual(values = c("black", "black")) +
    scale_fill_manual(values = c("#42BA97", "#EF5350")) +
    coord_polar(start = 0) +
    scale_x_continuous(breaks = c(0, 90, 180, 270), labels = c("0", "90", "180", "270")) +
    theme(axis.text = element_text(color = "black", hjust = 0.2), axis.text.y = element_blank(), axis.ticks.y = element_blank(), 
          panel.grid = element_blank(), axis.title = element_blank(), panel.background = element_blank(), 
          legend.position = "none") +
    scale_y_continuous(limits = c(0, 2500))
  
  # Füge Text ein
  efficiency_value <- efficiency_values[condition]
  plot <- plot + annotate("text", x = 180, y = 1800 * 1.1, label = paste("Eff:", efficiency_value,"%"), size = 4, color = "black")
  plot <- plot + annotate("text", x = 0, y = 1800 * 1.1, label = condition, size = 4, color = "black", vjust = 0.5, hjust = 0.5)
  plot <- plot + annotate("text", x = 270, y = 1800 * 1.2, label = "P-", size = 4, color = "black")
  plot <- plot + annotate("text", x = 90, y = 1800 * 1.2, label = "P+", size = 4, color = "black")
  
  # Entferne den automatischen Titel
  plot <- plot + labs(title = NULL)
  
  # Füge den aktuellen Plot zur Liste der Plots hinzu
  plots[[condition]] <- plot
}

# Erstellen Sie die finale Abbildung, indem Sie die Plots nebeneinander anordnen
final_plot <- wrap_plots(plots, ncol = 2)

# Anzeigen der finalen Abbildung
final_plot
```

##### Intensitäten

```{r}
# Gruppieren und Durchschnitt berechnen, Einträge mit Intensität = "niedrig" ignorieren
Efficiency_Int_df <- Efficiency_Daten_df %>%
  filter(Intensität != "niedrig") %>%
  group_by(Intensität) %>%
  summarise(Efficiency = round(mean(Efficiency, na.rm = TRUE), 2)) %>%
  mutate(intensity = paste(Intensität))

# Leere Listen für die Durchschnittswerte erstellen
Intensität_list_L <- list()
Intensität_list_R <- list()

# Initialisiere die Durchschnittswerte für "leicht", "moderat" und "schwer"
mean_leicht_L <- numeric(180)
mean_moderat_L <- numeric(180)
mean_schwer_L <- numeric(180)
mean_leicht_R <- numeric(180)
mean_moderat_R <- numeric(180)
mean_schwer_R <- numeric(180)

# Iteriere über die Namen in P_L_list
for (name in names(P_L_list)) {
  # Prüfe, ob "leicht" im Namen vorkommt
  if (grepl("leicht", name)) {
    # Addiere den Eintrag zu mean_leicht_L
    mean_leicht_L <- mean_leicht_L + P_L_list[[name]]
  }
  # Prüfe, ob "moderat" im Namen vorkommt
  if (grepl("moderat", name)) {
    # Addiere den Eintrag zu mean_moderat_L
    mean_moderat_L <- mean_moderat_L + P_L_list[[name]]
  }
  # Prüfe, ob "schwer" im Namen vorkommt
  if (grepl("schwer", name)) {
    # Addiere den Eintrag zu mean_schwer_L
    mean_schwer_L <- mean_schwer_L + P_L_list[[name]]
  }
}

# Iteriere über die Namen in P_R_list
for (name in names(P_R_list)) {
  # Prüfe, ob "leicht" im Namen vorkommt
  if (grepl("leicht", name)) {
    # Addiere den Eintrag zu mean_leicht_R
    mean_leicht_R <- mean_leicht_R + P_R_list[[name]]
  }
  # Prüfe, ob "moderat" im Namen vorkommt
  if (grepl("moderat", name)) {
    # Addiere den Eintrag zu mean_moderat_R
    mean_moderat_R <- mean_moderat_R + P_R_list[[name]]
  }
  # Prüfe, ob "schwer" im Namen vorkommt
  if (grepl("schwer", name)) {
    # Addiere den Eintrag zu mean_schwer_R
    mean_schwer_R <- mean_schwer_R + P_R_list[[name]]
  }
}

# Berechne den Durchschnitt für "leicht", "moderat" und "schwer" über alle Datenpunkte
Intensität_list_L[["leicht"]] <- mean_leicht_L / sum(grepl("leicht", names(P_L_list)))
Intensität_list_L[["moderat"]] <- mean_moderat_L / sum(grepl("moderat", names(P_L_list)))
Intensität_list_L[["schwer"]] <- mean_schwer_L / sum(grepl("schwer", names(P_L_list)))

Intensität_list_R[["leicht"]] <- mean_leicht_R / sum(grepl("leicht", names(P_R_list)))
Intensität_list_R[["moderat"]] <- mean_moderat_R / sum(grepl("moderat", names(P_R_list)))
Intensität_list_R[["schwer"]] <- mean_schwer_R / sum(grepl("schwer", names(P_R_list)))

# Winkeldaten definieren
Winkeldaten <- seq(0, 358, by = 2)

efficiency_values <- Efficiency_Int_df$Efficiency
names(efficiency_values) <- Efficiency_Int_df$intensity

# Leere Liste für die ggplot-Plots erstellen
ggplot_plots <- list()

# Schleife über die Intensitäten ("leicht", "moderat" und "schwer")
for (intensity in c("leicht", "moderat", "schwer")) {
  values_L <- Intensität_list_L[[intensity]]
  values_R <- Intensität_list_R[[intensity]]
  values_avg <- rowMeans(data.frame(P_R = values_R, P_L = values_L))
  adjusted_Winkeldaten <- (Winkeldaten + 180) %% 360
  
  # Vorbereitung der Datenrahmen für das Plotten
  data_L <- data.frame(theta = adjusted_Winkeldaten, r = values_L)
  data_R <- data.frame(theta = Winkeldaten, r = values_R)
  merged_data <- merge(data_L[c("theta", "r")], data_R[c("theta", "r")], by = "theta", all = FALSE)
  
  # Berechnung und Anpassung der Daten für das Plotten
  merged_data$r_avg <- rowMeans(merged_data[c("r.x", "r.y")])
  merged_data$r_avg <- ifelse(merged_data$r_avg >= 0, merged_data$r_avg + 1200, merged_data$r_avg - 1200)
  merged_data$color <- ifelse(merged_data$r_avg > 0, "#42BA97", "#EF5350")
  
  data_avg <- data.frame(theta = Winkeldaten, r = abs(merged_data$r_avg), color = merged_data$color)
  data_avg$Baseline <- 1200
  
  # Erstellung des ggplot-Plots für die aktuelle Intensität
  plot <- ggplot(data_avg, aes(x = theta, y = r, fill = color)) +
    geom_ribbon(aes(ymin = Baseline, ymax = r), alpha = 0.5) +
    geom_line(aes(color = color), size = 0.8) +
    geom_hline(yintercept = 1200, linetype = "solid", color = "black", size = 0.8) +
    scale_colour_manual(values = c("black", "black")) +
    scale_fill_manual(values = c("#42BA97", "#EF5350")) +
    coord_polar(start = 0) +
    scale_x_continuous(breaks = c(0, 90, 180, 270), labels = c("0", "90", "180", "270")) +
    theme(axis.text = element_text(color = "black", hjust = 0.2), axis.text.y = element_blank(), axis.ticks.y = element_blank(), 
          panel.grid = element_blank(), axis.title = element_blank(), panel.background = element_blank(), 
          legend.position = "none") +
    scale_y_continuous(limits = c(0, 2500))
  
  # Füge Text ein
  efficiency_value <- efficiency_values[intensity]
  plot <- plot + annotate("text", x = 180, y = 1800 * 1.1, label = paste("Eff:", efficiency_value,"%"), size = 4, color = "black")
  plot <- plot + annotate("text", x = 0, y = 1800 * 1.1, label = intensity, size = 4, color = "black", vjust = 0.5, hjust = 0.5)
  plot <- plot + annotate("text", x = 270, y = 1800 * 1.2, label = "P-", size = 4, color = "black")
  plot <- plot + annotate("text", x = 90, y = 1800 * 1.2, label = "P+", size = 4, color = "black")
  
  # Entferne den automatischen Titel
  plot <- plot + labs(title = NULL)
  
  # Füge den ggplot-Plot zur Liste der ggplot-Plots hinzu
  ggplot_plots[[intensity]] <- plot
}

# Erstellen Sie die finale Abbildung, indem Sie die ggplot-Plots nebeneinander anordnen
final_plot <- ggplot_plots[[1]] + ggplot_plots[[2]] + ggplot_plots[[3]]

# Anzeigen der finalen Abbildung
final_plot
```

##### Bedingungen x Intensität

```{r}

# Gruppieren und Durchschnitt berechnen
Efficiency_Bed_Int_df <- Efficiency_Daten_df %>%
  group_by(Intensität, Bedingung) %>%
  summarise(Efficiency = round(mean(Efficiency, na.rm = TRUE), 2)) %>%
  mutate(intensity_condition = paste(Intensität, Bedingung, sep = "_")) 

# Leere Listen für die Durchschnittswerte erstellen
Bed_Int_list_L <- list()
Bed_Int_list_R <- list()

# Initialisiere die Durchschnittswerte für die verschiedenen Kombinationen von Intensität und Bedingung
mean_leicht_sitzen_L <- numeric(180)
mean_leicht_stehen_L <- numeric(180)
mean_moderat_sitzen_L <- numeric(180)
mean_moderat_stehen_L <- numeric(180)
mean_schwer_sitzen_L <- numeric(180)
mean_schwer_stehen_L <- numeric(180)

mean_leicht_sitzen_R <- numeric(180)
mean_leicht_stehen_R <- numeric(180)
mean_moderat_sitzen_R <- numeric(180)
mean_moderat_stehen_R <- numeric(180)
mean_schwer_sitzen_R <- numeric(180)
mean_schwer_stehen_R <- numeric(180)

# Iteriere über die Namen in P_L_list
for (name in names(P_L_list)) {
  # Prüfe, welche Kombination von Intensität und Bedingung im Namen vorkommt
  if (grepl("leicht_sitzen", name)) {
    mean_leicht_sitzen_L <- mean_leicht_sitzen_L + P_L_list[[name]]
  }
  if (grepl("leicht_stehen", name)) {
    mean_leicht_stehen_L <- mean_leicht_stehen_L + P_L_list[[name]]
  }
  if (grepl("moderat_sitzen", name)) {
    mean_moderat_sitzen_L <- mean_moderat_sitzen_L + P_L_list[[name]]
  }
  if (grepl("moderat_stehen", name)) {
    mean_moderat_stehen_L <- mean_moderat_stehen_L + P_L_list[[name]]
  }
  if (grepl("schwer_sitzen", name)) {
    mean_schwer_sitzen_L <- mean_schwer_sitzen_L + P_L_list[[name]]
  }
  if (grepl("schwer_stehen", name)) {
    mean_schwer_stehen_L <- mean_schwer_stehen_L + P_L_list[[name]]
  }
}

# Iteriere über die Namen in P_R_list
for (name in names(P_R_list)) {
  # Prüfe, welche Kombination von Intensität und Bedingung im Namen vorkommt
  if (grepl("leicht_sitzen", name)) {
    mean_leicht_sitzen_R <- mean_leicht_sitzen_R + P_R_list[[name]]
  }
  if (grepl("leicht_stehen", name)) {
    mean_leicht_stehen_R <- mean_leicht_stehen_R + P_R_list[[name]]
  }
  if (grepl("moderat_sitzen", name)) {
    mean_moderat_sitzen_R <- mean_moderat_sitzen_R + P_R_list[[name]]
  }
  if (grepl("moderat_stehen", name)) {
    mean_moderat_stehen_R <- mean_moderat_stehen_R + P_R_list[[name]]
  }
  if (grepl("schwer_sitzen", name)) {
    mean_schwer_sitzen_R <- mean_schwer_sitzen_R + P_R_list[[name]]
  }
  if (grepl("schwer_stehen", name)) {
    mean_schwer_stehen_R <- mean_schwer_stehen_R + P_R_list[[name]]
  }
}

# Berechne den Durchschnitt für die verschiedenen Kombinationen von Intensität und Bedingung über alle Datenpunkte
Bed_Int_list_L[["leicht_sitzen"]] <- mean_leicht_sitzen_L / sum(grepl("leicht_sitzen", names(P_L_list)))
Bed_Int_list_L[["leicht_stehen"]] <- mean_leicht_stehen_L / sum(grepl("leicht_stehen", names(P_L_list)))
Bed_Int_list_L[["moderat_sitzen"]] <- mean_moderat_sitzen_L / sum(grepl("moderat_sitzen", names(P_L_list)))
Bed_Int_list_L[["moderat_stehen"]] <- mean_moderat_stehen_L / sum(grepl("moderat_stehen", names(P_L_list)))
Bed_Int_list_L[["schwer_sitzen"]] <- mean_schwer_sitzen_L / sum(grepl("schwer_sitzen", names(P_L_list)))
Bed_Int_list_L[["schwer_stehen"]] <- mean_schwer_stehen_L / sum(grepl("schwer_stehen", names(P_L_list)))

Bed_Int_list_R[["leicht_sitzen"]] <- mean_leicht_sitzen_R / sum(grepl("leicht_sitzen", names(P_R_list)))
Bed_Int_list_R[["leicht_stehen"]] <- mean_leicht_stehen_R / sum(grepl("leicht_stehen", names(P_R_list)))
Bed_Int_list_R[["moderat_sitzen"]] <- mean_moderat_sitzen_R / sum(grepl("moderat_sitzen", names(P_R_list)))
Bed_Int_list_R[["moderat_stehen"]] <- mean_moderat_stehen_R / sum(grepl("moderat_stehen", names(P_R_list)))
Bed_Int_list_R[["schwer_sitzen"]] <- mean_schwer_sitzen_R / sum(grepl("schwer_sitzen", names(P_R_list)))
Bed_Int_list_R[["schwer_stehen"]] <- mean_schwer_stehen_R / sum(grepl("schwer_stehen", names(P_R_list)))

# Winkeldaten definieren
Winkeldaten <- seq(0, 358, by = 2)

# Liste der Intensitäts- und Bedingungskombinationen erstellen
intensity_conditions <- c("leicht_sitzen", "leicht_stehen", "moderat_sitzen", "moderat_stehen", "schwer_sitzen", "schwer_stehen")

efficiency_values <- Efficiency_Bed_Int_df$Efficiency
names(efficiency_values) <- Efficiency_Bed_Int_df$intensity_condition

# Filtern der Daten, um nur Werte über der Baseline zu behalten
data_avg <- data_avg[data_avg$r > data_avg$Baseline, ]
# Sortieren der Daten, sodass grüne Werte zuletzt geplottet werden
data_avg <- data_avg[order(data_avg$color == "#42BA97", decreasing = TRUE), ]

# Leere Liste für die ggplot-Plots erstellen
ggplot_plots <- list()

# Liste der Intensitäts- und Bedingungskombinationen erstellen
intensity_conditions <- c("leicht_sitzen", "leicht_stehen", "moderat_sitzen", "moderat_stehen", "schwer_sitzen", "schwer_stehen")

# Schleife über die Intensitäts- und Bedingungskombinationen
for (intensity_condition in intensity_conditions) {
  values_L <- Bed_Int_list_L[[intensity_condition]]
  values_R <- Bed_Int_list_R[[intensity_condition]]
  values_avg <- rowMeans(data.frame(P_R = values_R, P_L = values_L))
  adjusted_Winkeldaten <- (Winkeldaten + 180) %% 360
  
  # Vorbereitung der Datenrahmen für das Plotten
  data_L <- data.frame(theta = adjusted_Winkeldaten, r = values_L)
  data_R <- data.frame(theta = Winkeldaten, r = values_R)
  merged_data <- merge(data_L[c("theta", "r")], data_R[c("theta", "r")], by = "theta", all = FALSE)
  
  # Berechnung und Anpassung der Daten für das Plotten
  merged_data$r_avg <- rowMeans(merged_data[c("r.x", "r.y")])
  merged_data$r_avg <- ifelse(merged_data$r_avg >= 0, merged_data$r_avg + 800, merged_data$r_avg - 800)
  merged_data$color <- ifelse(merged_data$r_avg > 0, "#42BA97", "#EF5350")
  
  data_avg <- data.frame(theta = Winkeldaten, r = abs(merged_data$r_avg), color = merged_data$color)
  data_avg$Baseline <- 800
  
  # Erstellung des ggplot-Plots für die aktuelle Intensität und Bedingung
  plot <- ggplot(data_avg, aes(x = theta, y = r, fill = color)) +
    geom_ribbon(aes(ymin = Baseline, ymax = r), alpha = 0.65) +
    geom_point(aes(color = color), size = 0.3) +
    geom_hline(yintercept = 800, linetype = "solid", color = "black", size = 0.5) +
    geom_hline(yintercept = 800, linetype = "solid", color = "black", size = 0.5) +
    scale_colour_manual(values = c("black", "black")) +
    scale_fill_manual(values = c("#42BA97", "#EF5350")) +
    coord_polar(start = 0) +
    scale_x_continuous(breaks = c(0, 90, 180, 270), labels = c("0", "90", "180", "270")) +
    theme(axis.text = element_text(color = "black", hjust = 0.2), axis.text.y = element_blank(), axis.ticks.y = element_blank(), 
          panel.grid = element_blank(), axis.title = element_blank(), panel.background = element_blank(), 
          legend.position = "none") +
    scale_y_continuous(limits = c(0, 1800))
  
  # Füge Text ein
  efficiency_value <- efficiency_values[intensity_condition]
  plot <- plot + annotate("text", x = 178, y = 1300 * 1.1, label = paste("Eff:", efficiency_value,"%"), size = 4, color = "black")
  plot <- plot + annotate("text", x = 0, y = 1300 * 1.1, label = intensity_condition, size = 4, color = "black", vjust = 0.5, hjust = 0.5)
  plot <- plot + annotate("text", x = 270, y = 1300 * 1.2, label = "P-", size = 4, color = "black")
  plot <- plot + annotate("text", x = 90, y = 1300 * 1.2, label = "P+", size = 4, color = "black")
  
  # Entferne den automatischen Titel
  plot <- plot + labs(title = NULL)
  
  # Füge den ggplot-Plot zur Liste der ggplot-Plots hinzu
  ggplot_plots[[intensity_condition]] <- plot
}

# Erstellen Sie die finale Abbildung, indem Sie die ggplot-Plots nebeneinander anordnen
final_plot <- ggplot_plots[[1]] + ggplot_plots[[3]] + ggplot_plots[[5]] + ggplot_plots[[2]]  + ggplot_plots[[4]]  + ggplot_plots[[6]]

# Anzeigen der finalen Abbildung
final_plot
```

#### Efficiency - Bedingungen x Intensität

```{r}
### Efficiency - Bedingung x Intensität ###
# Neue Spalte für die Kombination von Intensität und Bedingung
P_Ges_df$Intensität_Bedingung <- paste(P_Ges_df$Intensität, P_Ges_df$Bedingung, sep = " - ")
scatter_fig <- plot_ly(data = P_Ges_df, x = ~Intensität_Bedingung, y = ~Efficiency, type = 'scatter', mode = 'markers',
                       color = ~factor(Proband), colors = colorRampPalette(brewer.pal(10,"Spectral"))(20),
                       marker = list(size = 10, opacity = 0.8))
scatter_fig <- scatter_fig %>% layout(margin = list(t = 40), yaxis = list(title = 'Effizienz'), xaxis = list(title = 'Intensität und Bedingung'))
scatter_fig
```

#### Efficiency vs. W_kg

```{r}
# Lineare Regression und Modellzusammenfassung
lin_reg <- lm(Efficiency ~ W_kg, data = P_Ges_df)
summary_lin_reg <- summary(lin_reg)
f_stat <- summary_lin_reg$fstatistic
p_value <- format.pval(pf(f_stat["value"], f_stat["numdf"], f_stat["dendf"], lower.tail = FALSE), digits = 4)
equation_text <- sprintf("y = %.2fx + %.2f", coef(lin_reg)["W_kg"], coef(lin_reg)["(Intercept)"])
r_squared_text <- sprintf("R² = %.2f", summary_lin_reg$r.squared)
f_stat_text <- sprintf("F (%d, %d) = %.2f, p = %s", f_stat["numdf"], f_stat["dendf"], f_stat["value"], p_value)
# Berechnung der Regressionsgeraden
w_kg_seq <- seq(min(P_Ges_df$W_kg), max(P_Ges_df$W_kg), length.out = 100)
regression_values <- predict(lin_reg, newdata = data.frame(W_kg = w_kg_seq))
# Erstellen des Plotly-Diagramms
plot_ly() %>%
  add_markers(data = P_Ges_df, x = ~W_kg, y = ~Efficiency, type = 'scatter', mode = 'markers',
              color = ~factor(Proband), colors = colorRampPalette(brewer.pal(10,"Spectral"))(20),
              marker = list(size = 9, opacity = 0.8)) %>%
  layout(title = "Efficiency vs. W_kg",
         margin = list(t = 40), 
         xaxis = list(title = "W_kg"),
         yaxis = list(title = "Efficiency")) %>%
  add_lines(x = ~w_kg_seq, y = ~regression_values, name = "Regressionslinie", line = list(color = 'darkgrey', width = 2)) %>%
  add_annotations(text = equation_text, x = min(P_Ges_df$W_kg), y = max(P_Ges_df$Efficiency), 
                  showarrow = FALSE, xanchor = 'left', yanchor = 'bottom') %>%
  add_annotations(text = r_squared_text, x = min(P_Ges_df$W_kg), y = max(P_Ges_df$Efficiency) * 0.98, 
                  showarrow = FALSE, xanchor = 'left', yanchor = 'bottom') %>%
  add_annotations(text = f_stat_text, x = min(P_Ges_df$W_kg), y = max(P_Ges_df$Efficiency) * 0.96, 
                  showarrow = FALSE, xanchor = 'left', yanchor = 'bottom')
```

#### Durchschnittliche - Efficiency x Watt/kg

```{r}
# Berechnen der Durchschnittswerte für jeden Probanden
P_Ges_Proband_df <- P_Ges_df %>%
  group_by(Proband) %>%
  summarise(Avg_W_kg = mean(W_kg, na.rm = TRUE),
            Avg_Efficiency = mean(Efficiency, na.rm = TRUE))

# Lineare Regression
lin_reg <- lm(Avg_Efficiency ~ Avg_W_kg, data = P_Ges_Proband_df)
reg_coefficients <- coef(lin_reg)
r_squared <- summary(lin_reg)$r.squared
equation_text <- sprintf("y = %.2fx + %.2f", reg_coefficients["Pedal_Smoothness"], reg_coefficients["(Intercept)"])
r_squared_text <- sprintf("R² = %.2f", r_squared)
summary_lin_reg <- summary(lin_reg)
f_stat <- summary_lin_reg$fstatistic
p_value <- format.pval(pf(f_stat["value"], f_stat["numdf"], f_stat["dendf"], lower.tail = FALSE), digits = 4)
f_stat_text <- sprintf("F (%d, %d) = %.2f, p = %s", f_stat["numdf"], f_stat["dendf"], f_stat["value"], p_value)


# Erstellen des Plotly-Diagramms
plot_ly() %>%
  add_markers(data = P_Ges_Proband_df, x = ~Avg_W_kg, y = ~Avg_Efficiency, type = 'scatter', mode = 'markers',
              color = ~factor(Proband),  colors = colorRampPalette(brewer.pal(10,"Spectral"))(20), # Benutzen einer Farbpalette mit genügend Farben
              marker = list(size = 10, opacity = 0.8)) %>%
  add_lines(x = ~Avg_W_kg, y = fitted(lin_reg), line = list(color = 'darkgrey', width = 2, opacity = 0.7), showlegend = FALSE) %>%
  layout(title = "Durchschnittliche Efficiency vs. W_kg pro Proband",
         margin = list(t = 40), 
         xaxis = list(title = "Durchschnittliches W/kg"),
         yaxis = list(title = "Durchschnittliche Efficiency")) %>%
  add_annotations(text = sprintf("y = %.2fx + %.2f", reg_coefficients["Avg_W_kg"], reg_coefficients["(Intercept)"]),
                  x = min(P_Ges_Proband_df$Avg_W_kg), y = max(P_Ges_Proband_df$Avg_Efficiency), showarrow = FALSE, xanchor = 'left') %>%
  add_annotations(text = sprintf("R² = %.2f", r_squared),
                  x = min(P_Ges_Proband_df$Avg_W_kg), y = max(P_Ges_Proband_df$Avg_Efficiency) * 0.98, showarrow = FALSE, xanchor = 'left') %>%
  add_annotations(text = f_stat_text, x = min(P_Ges_Proband_df$Avg_W_kg), y = max(P_Ges_Proband_df$Avg_Efficiency) * 0.96, 
                  showarrow = FALSE, xanchor = 'left', yanchor = 'bottom')
```

### Pedal_Smoothness {.tabset}

#### Berechnung

![Berechnung der Pedal Smoothness](Pedal_Smoothness.png)

#### Pedal_Smoothness vs. W_kg

```{r}
# Lineare Regression
lin_reg <- lm(Pedal_Smoothness ~ W_kg, data = P_Ges_df)
reg_coefficients <- coef(lin_reg)
r_squared <- summary(lin_reg)$r.squared
equation_text <- sprintf("y = %.2fx + %.2f", reg_coefficients["W_kg"], reg_coefficients["(Intercept)"])
r_squared_text <- sprintf("R² = %.2f", r_squared)
summary_lin_reg <- summary(lin_reg)
f_stat <- summary_lin_reg$fstatistic
p_value <- format.pval(pf(f_stat["value"], f_stat["numdf"], f_stat["dendf"], lower.tail = FALSE), digits = 4)
f_stat_text <- sprintf("F (%d, %d) = %.2f, p = %s", f_stat["numdf"], f_stat["dendf"], f_stat["value"], p_value)

# Berechnung der Regressionsgeraden für eine Sequenz von W_kg
w_kg_seq <- seq(min(P_Ges_df$W_kg), max(P_Ges_df$W_kg), length.out = 100)
regression_values <- predict(lin_reg, newdata = data.frame(W_kg = w_kg_seq))

# Erstellen des Plotly-Diagramms mit Regressionsgerade und statistischen Informationen + ColorBrewer
plot_ly() %>%
  add_markers(data = P_Ges_df, x = ~W_kg, y = ~Pedal_Smoothness, type = 'scatter', mode = 'markers',
              color = ~factor(Proband), colors = colorRampPalette(brewer.pal(10,"Spectral"))(20),
              marker = list(size = 9, opacity = 0.8)) %>%
  layout(title = "Pedal_Smoothness vs. W_kg",
         margin = list(t = 40), 
         xaxis = list(title = "W_kg"),
         yaxis = list(title = "Pedal_Smoothness")) %>%
  add_lines(x = ~w_kg_seq, y = ~regression_values, name = "Regressionslinie", line = list(color = 'darkgrey', width = 2)) %>%
  add_annotations(text = equation_text, x = min(P_Ges_df$W_kg), y = max(P_Ges_df$Pedal_Smoothness), 
                  showarrow = FALSE, xanchor = 'left', yanchor = 'bottom') %>%
  add_annotations(text = r_squared_text, x = min(P_Ges_df$W_kg), y = max(P_Ges_df$Pedal_Smoothness) * 0.98, 
                  showarrow = FALSE, xanchor = 'left', yanchor = 'bottom') %>%
  add_annotations(text = f_stat_text, x = min(P_Ges_df$W_kg), y = max(P_Ges_df$Pedal_Smoothness) * 0.96, 
                  showarrow = FALSE, xanchor = 'left', yanchor = 'bottom')
```

#### Pedal_Smoothness vs. Efficiency

```{r}
# Lineare Regression
lin_reg <- lm(Pedal_Smoothness ~ Efficiency, data = P_Ges_df)
reg_coefficients <- coef(lin_reg)
r_squared <- summary(lin_reg)$r.squared
equation_text <- sprintf("y = %.2fx + %.2f", reg_coefficients["Efficiency"], reg_coefficients["(Intercept)"])
r_squared_text <- sprintf("R² = %.2f", r_squared)
summary_lin_reg <- summary(lin_reg)
f_stat <- summary_lin_reg$fstatistic
p_value <- format.pval(pf(f_stat["value"], f_stat["numdf"], f_stat["dendf"], lower.tail = FALSE), digits = 4)
f_stat_text <- sprintf("F (%d, %d) = %.2f, p = %s", f_stat["numdf"], f_stat["dendf"], f_stat["value"], p_value)

# Berechnung der Regressionsgeraden für eine Sequenz von Efficiency
Efficiency_seq <- seq(min(P_Ges_df$Efficiency), max(P_Ges_df$Efficiency), length.out = 100)
regression_values <- predict(lin_reg, newdata = data.frame(Efficiency = Efficiency_seq))

# Erstellen des Plotly-Diagramms mit Regressionsgerade und statistischen Informationen + ColorBrewer
plot_ly() %>%
  add_markers(data = P_Ges_df, x = ~Efficiency, y = ~Pedal_Smoothness, type = 'scatter', mode = 'markers',
              color = ~factor(Proband), colors = colorRampPalette(brewer.pal(10,"Spectral"))(20),
              marker = list(size = 9, opacity = 0.8)) %>%
  layout(title = "Pedal_Smoothness vs. Efficiency",
         margin = list(t = 40), 
         xaxis = list(title = "Efficiency"),
         yaxis = list(title = "Pedal_Smoothness")) %>%
  add_lines(x = ~Efficiency_seq, y = ~regression_values, name = "Regressionslinie", line = list(color = 'darkgrey', width = 2)) %>%
  add_annotations(text = equation_text, x = min(P_Ges_df$Efficiency), y = max(P_Ges_df$Pedal_Smoothness), 
                  showarrow = FALSE, xanchor = 'left', yanchor = 'bottom') %>%
  add_annotations(text = r_squared_text, x = min(P_Ges_df$Efficiency), y = max(P_Ges_df$Pedal_Smoothness) * 0.98, 
                  showarrow = FALSE, xanchor = 'left', yanchor = 'bottom') %>%
  add_annotations(text = f_stat_text, x = min(P_Ges_df$Efficiency), y = max(P_Ges_df$Pedal_Smoothness) * 0.96, 
                  showarrow = FALSE, xanchor = 'left', yanchor = 'bottom')
```

### Simulationsmodell - Innere Arbeit

```{r}
# ------------ Eingabeparameter ------------ 

mSp <- 90 # Masse Sportler [kg]
lOS <- 0.60 # Länge des Segments Oberschenkel [m]
lUS <- 0.55 # Länge des Segments Unterschenkel [m]
lBein <- 0.90# # Innenbeinlänge [m]
uOS <- 0.54 # Umfang OS [m]
uUS <- 0.38 # Umfang US [m]
lKurbel <- 0.175 # Kurbellänge [m]
thetaKurbel <- 0.002 # Trägheitsmoment der Fahrradkurbel [kg m^2]

P3 <- c(-0.200, 0.88) # kartesische Koordinaten P3 (Oberflächenrepräsentant der Hüfte) [m]

lambdaOS <- 0.4095 # Abstand zw. dem proximalen Punkt (in der Nähe des Körpers) des Oberschenkelsegments und dessen Schwerpunkt
lambdaUS <- 0.4459 # Abstand proximaler Segmentpunkt - Schwerpunkt

rRelOS <- 0.1416 # relative Segmentmasse OS
rRelUS <- 0.0433 # relative Segmentmasse US

n <- 360 # Anzahl Messwerte pro Umdrehung 
nD <- 80 # Drehzahl

Testdauer <- 300

# ------------ Berechnungen ------------ 
# Zeitintervalle
delta_t <- 60 / (n * nD)
T <- 60 / nD
time <- seq(0, T, by=delta_t)

# Abstand vom Hüftgelenk zur Kurbelachse (0,0) berechnen
S <- sqrt(sum(P3^2))

# Segmentmasse OS und US [kg]
mOS <- mSp * rRelOS 
mUS <- mSp * rRelUS 

# Trägheitsmoment des Segments (Vollzylinder, der um eine Querachse (zweizählige Symmetrieachse) rotiert) [kg m^2]
thetaOS <- (1/4) * mOS * (uOS / (2 * pi))^2 + (1/12) * mOS * lOS^2
thetaUS <- (1/4) * mUS * (uUS / (2 * pi))^2 + (1/12) * mUS * lUS^2

# Abstand Hüftgelenk-Kurbelachse (0,0)
SPraxis <- 0.885 * lBein

# Winkelintervalle
delta_phi1 <- 2 * pi / n
phi1 <- seq(0, 2 * pi, by=delta_phi1)
phi1 <- phi1[-length(phi1)]  # Entfernt das letzte Element
phi1_deg = phi1 * (180 / pi) # phi1 in Grad umrechnen
omega <- 2 * pi * nD / 60

# ------------- Simulationsmodell ---------------
# P0 definieren
P0_x <- 0
P0_y <- 0

# Winkel in Grad umrechnen
phi1_deg = phi1 * (180 / pi)

# Erstellen des Diagramms mit Plotly
fig <- Simulation_df %>%
  plot_ly() %>%
  
  # Trace für P1
  add_trace(
    x = ~x1,
    y = ~y1,
    text = ~paste("Winkel:", phi1_deg),
    ids = ~phi1_deg,
    frame = ~phi1_deg,
    type = 'scatter',
    mode = 'markers',
    marker = list( size = 5),
    name = "P1"
  ) %>%
  
  # Trace für P2
  add_trace(
    x = ~x2,
    y = ~y2,
    text = ~paste("Winkel:", phi1_deg),
    ids = ~phi1_deg,
    frame = ~phi1_deg,
    type = 'scatter',
    mode = 'markers',
    marker = list(size = 5),
    name = "P2"
  ) %>%
  
  # Trace für P3
  add_trace(
    x = ~x3,
    y = ~y3,
    text = ~paste("Winkel:", phi1_deg),
    ids = ~phi1_deg,
    frame = ~phi1_deg,
    type = 'scatter',
    mode = 'markers',
    marker = list(size = 5),
    name = "P3"
  ) %>%
  
  # Segment von P0 zu P1
  add_segments(
    x = ~x0, xend = ~x1,
    y = ~y0, yend = ~y1,
    ids = ~phi1_deg,
    frame = ~phi1_deg,
    line = list(color = 'black'),
    showlegend = FALSE
  ) %>%
  
  # Segment von P1 zu P2
  add_segments(
    x = ~x1, xend = ~x2,
    y = ~y1, yend = ~y2,
    ids = ~phi1_deg,
    frame = ~phi1_deg,
    line = list(color = 'darkgrey'),
    showlegend = FALSE
  ) %>%
  
  # Segment von P2 zu P3
  add_segments(
    x = ~x2, xend = ~x3,
    y = ~y2, yend = ~y3,
    ids = ~phi1_deg,
    frame = ~phi1_deg,
    line = list(color = 'darkgrey'),
    showlegend = FALSE
  ) %>%
  
  layout(
    margin = list(t = 40), 
    xaxis = list(title = "X-Koordinate", range = c(-1.0, 1.0)),
    yaxis = list(title = "Y-Koordinate", range = c(-1.0, 1.0)),
    title = "Radmodell",
    aspectratio = list(x = 1, y = 1)  # Hier wird das Seitenverhältnis auf 1:1 gesetzt
  ) %>%
  
  animation_opts(
    frame = 1,
    transition = 1,
    easing = "linear",
    redraw = FALSE,
    mode = "immediate"
  ) %>%
  
  animation_button(
    x = 1, xanchor = "right", y = 0, yanchor = "bottom"
  ) %>%
  
  animation_slider(
    currentvalue = list(prefix = "Winkel ")
  )

fig

```

# Laktat
## Laktat {.tabset}

```{r}
# Initialisierung der Listen
Modellwerte_list <- list()
ΔBLC_data_df <- data.frame()

# Berechnung und Speicherung der Modellwerte
for (prefix in names(ΔBLC_list)) {
proband_data <- ΔBLC_list[[prefix]]

# Datenkonvertierung in DataFrame
df_proband <- data.frame(
  Leistung = unlist(lapply(proband_data, function(x) x$Leistung)),
  ΔBLC = unlist(lapply(proband_data, function(x) x$ΔBLC))
)

# Exponentielle Regression
exponential_model <- nls(ΔBLC ~ a * exp(b * Leistung), data = df_proband, start = list(a = 0.01, b = 0.0125))

# Extrahiere Modellkoeffizienten
coef_exponential_model <- coef(exponential_model)

# Berechne die Werte für die exponentielle Anpassungslinie
y_pred_proband <- coef_exponential_model['a'] * exp(coef_exponential_model['b'] * df_proband$Leistung)
    
    # Erweiterung des Leistungsbereichs und Berechnung der Anpassungslinie
    max_leistung <- max(df_proband$Leistung)
    extended_max_leistung <- max_leistung * 1.10
    x_seq <- seq(min(df_proband$Leistung), extended_max_leistung, length.out = 1000)
    y_pred <- coef_exponential_model['a'] * exp(coef_exponential_model['b'] * x_seq)
    
    # Berechnung für spezifische Belastung
    ΔBLC_Belastung_1 <- coef_exponential_model['a'] * exp(coef_exponential_model['b'] * df_proband$Leistung[3])
    
# Speichern der berechneten Werte in Modellwerte_list
Modellwerte_list[[prefix]] <- list(
  df_proband = df_proband,
  y_pred_proband = y_pred_proband,
  x_seq = x_seq,
  y_pred = y_pred,
  ΔBLC_Belastung_1 = ΔBLC_Belastung_1,
  coef_exponential_model = coef_exponential_model
)

# Zuordnung der ΔBLC Werte
for (i in 3:length(df_proband$Leistung)) {
  ΔBLC_data_df <- rbind(ΔBLC_data_df, data.frame(
    Proband = prefix,
    Nr = i - 2,
    ΔBLC = df_proband$ΔBLC[i]
  ))
}
}


```

### Proband 01

```{r}
BLC_Diagramme_list <- list()
prefix <- '01'
values <- Modellwerte_list[[as.character(prefix)]]
df_proband <- values$df_proband
y_pred_proband <- values$y_pred_proband
x_seq <- values$x_seq
y_pred <- values$y_pred
ΔBLC_Belastung_1 <- values$ΔBLC_Belastung_1
coef_exponential_model <- values$coef_exponential_model
# Verwenden Sie das temporäre Verzeichnis für Plotly-Dateien
plot_ly() %>%
  add_trace(data = df_proband, x = ~Leistung, y = ~ΔBLC, type = 'scatter', mode = 'markers',
            name = paste("ΔBLC mmol/l"),
            marker = list(color = "#2683C6", size = 7.0)) %>%
  add_trace(x = ~x_seq, y = ~y_pred, type = 'scatter', mode = 'lines', 
            name = 'Laktat Modellfunktion', 
            line = list(color = '#62A39F', width = 3)) %>%
  add_annotations(text = sprintf("ΔBLC = %.5f * e<sup>(%.5f * Leistung)", coef_exponential_model['a'], coef_exponential_model['b']),
                  x = min(df_proband$Leistung), y = max(y_pred), showarrow = FALSE,
                  xanchor = 'left', yanchor = 'bottom',
                  font = list(family = "Arial, sans-serif", size = 12, color = "black")) %>%
  add_trace(x = ~df_proband$Leistung[3], y = ~ΔBLC_Belastung_1, type = 'scatter', mode = 'markers',
            name = 'ΔBLC: Belastung 1', 
            marker = list(color = "#EF5350", size = 8.0)) %>%
  add_annotations(text = sprintf("ΔBLC<sub>1</sub> = %.2f mmol/l", ΔBLC_Belastung_1 ),
                  x = min(df_proband$Leistung), y = max(y_pred) * 0.93, showarrow = FALSE,
                  xanchor = 'left', yanchor = 'bottom',
                  font = list(family = "Arial, sans-serif", size = 12, color = "black")) %>%
  layout(
    title = paste("Proband:", prefix, "- BLC-Anstieg"),
    margin = list(t = 40),
    xaxis = list(title = "Leistung"),
    yaxis = list(title = "ΔBLC")
  )
```

### Proband 06

```{r}
BLC_Diagramme_list <- list()
prefix <- '06'
values <- Modellwerte_list[[as.character(prefix)]]
df_proband <- values$df_proband
y_pred_proband <- values$y_pred_proband
x_seq <- values$x_seq
y_pred <- values$y_pred
ΔBLC_Belastung_1 <- values$ΔBLC_Belastung_1
coef_exponential_model <- values$coef_exponential_model
# Verwenden Sie das temporäre Verzeichnis für Plotly-Dateien
plot_ly() %>%
  add_trace(data = df_proband, x = ~Leistung, y = ~ΔBLC, type = 'scatter', mode = 'markers',
            name = paste("ΔBLC mmol/l"),
            marker = list(color = "#2683C6", size = 7.0)) %>%
  add_trace(x = ~x_seq, y = ~y_pred, type = 'scatter', mode = 'lines', 
            name = 'Laktat Modellfunktion', 
            line = list(color = '#62A39F', width = 3)) %>%
  add_annotations(text = sprintf("ΔBLC = %.5f * e<sup>(%.5f * Leistung)", coef_exponential_model['a'], coef_exponential_model['b']),
                  x = min(df_proband$Leistung), y = max(y_pred), showarrow = FALSE,
                  xanchor = 'left', yanchor = 'bottom',
                  font = list(family = "Arial, sans-serif", size = 12, color = "black")) %>%
  add_trace(x = ~df_proband$Leistung[3], y = ~ΔBLC_Belastung_1, type = 'scatter', mode = 'markers',
            name = 'ΔBLC: Belastung 1', 
            marker = list(color = "#EF5350", size = 8.0)) %>%
  add_annotations(text = sprintf("ΔBLC<sub>1</sub> = %.2f mmol/l", ΔBLC_Belastung_1 ),
                  x = min(df_proband$Leistung), y = max(y_pred) * 0.93, showarrow = FALSE,
                  xanchor = 'left', yanchor = 'bottom',
                  font = list(family = "Arial, sans-serif", size = 12, color = "black")) %>%
  layout(
    title = paste("Proband:", prefix, "- BLC-Anstieg"),
    margin = list(t = 40),
    xaxis = list(title = "Leistung"),
    yaxis = list(title = "ΔBLC")
  )
```

### Proband 10

```{r}
BLC_Diagramme_list <- list()
prefix <- '10'
values <- Modellwerte_list[[as.character(prefix)]]
df_proband <- values$df_proband
y_pred_proband <- values$y_pred_proband
x_seq <- values$x_seq
y_pred <- values$y_pred
ΔBLC_Belastung_1 <- values$ΔBLC_Belastung_1
coef_exponential_model <- values$coef_exponential_model
# Verwenden Sie das temporäre Verzeichnis für Plotly-Dateien
plot_ly() %>%
  add_trace(data = df_proband, x = ~Leistung, y = ~ΔBLC, type = 'scatter', mode = 'markers',
            name = paste("ΔBLC mmol/l"),
            marker = list(color = "#2683C6", size = 7.0)) %>%
  add_trace(x = ~x_seq, y = ~y_pred, type = 'scatter', mode = 'lines', 
            name = 'Laktat Modellfunktion', 
            line = list(color = '#62A39F', width = 3)) %>%
  add_annotations(text = sprintf("ΔBLC = %.5f * e<sup>(%.5f * Leistung)", coef_exponential_model['a'], coef_exponential_model['b']),
                  x = min(df_proband$Leistung), y = max(y_pred), showarrow = FALSE,
                  xanchor = 'left', yanchor = 'bottom',
                  font = list(family = "Arial, sans-serif", size = 12, color = "black")) %>%
  add_trace(x = ~df_proband$Leistung[3], y = ~ΔBLC_Belastung_1, type = 'scatter', mode = 'markers',
            name = 'ΔBLC: Belastung 1', 
            marker = list(color = "#EF5350", size = 8.0)) %>%
  add_annotations(text = sprintf("ΔBLC<sub>1</sub> = %.2f mmol/l", ΔBLC_Belastung_1 ),
                  x = min(df_proband$Leistung), y = max(y_pred) * 0.93, showarrow = FALSE,
                  xanchor = 'left', yanchor = 'bottom',
                  font = list(family = "Arial, sans-serif", size = 12, color = "black")) %>%
  layout(
    title = paste("Proband:", prefix, "- BLC-Anstieg"),
    margin = list(t = 40),
    xaxis = list(title = "Leistung"),
    yaxis = list(title = "ΔBLC")
  )
```

### Proband 13

```{r}
BLC_Diagramme_list <- list()
prefix <- '13'
values <- Modellwerte_list[[as.character(prefix)]]
df_proband <- values$df_proband
y_pred_proband <- values$y_pred_proband
x_seq <- values$x_seq
y_pred <- values$y_pred
ΔBLC_Belastung_1 <- values$ΔBLC_Belastung_1
coef_exponential_model <- values$coef_exponential_model
# Verwenden Sie das temporäre Verzeichnis für Plotly-Dateien
plot_ly() %>%
  add_trace(data = df_proband, x = ~Leistung, y = ~ΔBLC, type = 'scatter', mode = 'markers',
            name = paste("ΔBLC mmol/l"),
            marker = list(color = "#2683C6", size = 7.0)) %>%
  add_trace(x = ~x_seq, y = ~y_pred, type = 'scatter', mode = 'lines', 
            name = 'Laktat Modellfunktion', 
            line = list(color = '#62A39F', width = 3)) %>%
  add_annotations(text = sprintf("ΔBLC = %.5f * e<sup>(%.5f * Leistung)", coef_exponential_model['a'], coef_exponential_model['b']),
                  x = min(df_proband$Leistung), y = max(y_pred), showarrow = FALSE,
                  xanchor = 'left', yanchor = 'bottom',
                  font = list(family = "Arial, sans-serif", size = 12, color = "black")) %>%
  add_trace(x = ~df_proband$Leistung[3], y = ~ΔBLC_Belastung_1, type = 'scatter', mode = 'markers',
            name = 'ΔBLC: Belastung 1', 
            marker = list(color = "#EF5350", size = 8.0)) %>%
  add_annotations(text = sprintf("ΔBLC<sub>1</sub> = %.2f mmol/l", ΔBLC_Belastung_1 ),
                  x = min(df_proband$Leistung), y = max(y_pred) * 0.93, showarrow = FALSE,
                  xanchor = 'left', yanchor = 'bottom',
                  font = list(family = "Arial, sans-serif", size = 12, color = "black")) %>%
  layout(
    title = paste("Proband:", prefix, "- BLC-Anstieg"),
    margin = list(t = 40),
    xaxis = list(title = "Leistung"),
    yaxis = list(title = "ΔBLC")
  )
```

### Proband 15

```{r}
BLC_Diagramme_list <- list()
prefix <- '15'
values <- Modellwerte_list[[as.character(prefix)]]
df_proband <- values$df_proband
y_pred_proband <- values$y_pred_proband
x_seq <- values$x_seq
y_pred <- values$y_pred
ΔBLC_Belastung_1 <- values$ΔBLC_Belastung_1
coef_exponential_model <- values$coef_exponential_model
# Verwenden Sie das temporäre Verzeichnis für Plotly-Dateien
plot_ly() %>%
  add_trace(data = df_proband, x = ~Leistung, y = ~ΔBLC, type = 'scatter', mode = 'markers',
            name = paste("ΔBLC mmol/l"),
            marker = list(color = "#2683C6", size = 7.0)) %>%
  add_trace(x = ~x_seq, y = ~y_pred, type = 'scatter', mode = 'lines', 
            name = 'Laktat Modellfunktion', 
            line = list(color = '#62A39F', width = 3)) %>%
  add_annotations(text = sprintf("ΔBLC = %.5f * e<sup>(%.5f * Leistung)", coef_exponential_model['a'], coef_exponential_model['b']),
                  x = min(df_proband$Leistung), y = max(y_pred), showarrow = FALSE,
                  xanchor = 'left', yanchor = 'bottom',
                  font = list(family = "Arial, sans-serif", size = 12, color = "black")) %>%
  add_trace(x = ~df_proband$Leistung[3], y = ~ΔBLC_Belastung_1, type = 'scatter', mode = 'markers',
            name = 'ΔBLC: Belastung 1', 
            marker = list(color = "#EF5350", size = 8.0)) %>%
  add_annotations(text = sprintf("ΔBLC<sub>1</sub> = %.2f mmol/l", ΔBLC_Belastung_1 ),
                  x = min(df_proband$Leistung), y = max(y_pred) * 0.93, showarrow = FALSE,
                  xanchor = 'left', yanchor = 'bottom',
                  font = list(family = "Arial, sans-serif", size = 12, color = "black")) %>%
  layout(
    title = paste("Proband:", prefix, "- BLC-Anstieg"),
    margin = list(t = 40),
    xaxis = list(title = "Leistung"),
    yaxis = list(title = "ΔBLC")
  )
```

### Proband 19

```{r}
BLC_Diagramme_list <- list()
prefix <- '19'
values <- Modellwerte_list[[as.character(prefix)]]
df_proband <- values$df_proband
y_pred_proband <- values$y_pred_proband
x_seq <- values$x_seq
y_pred <- values$y_pred
ΔBLC_Belastung_1 <- values$ΔBLC_Belastung_1
coef_exponential_model <- values$coef_exponential_model
# Verwenden Sie das temporäre Verzeichnis für Plotly-Dateien
plot_ly() %>%
  add_trace(data = df_proband, x = ~Leistung, y = ~ΔBLC, type = 'scatter', mode = 'markers',
            name = paste("ΔBLC mmol/l"),
            marker = list(color = "#2683C6", size = 7.0)) %>%
  add_trace(x = ~x_seq, y = ~y_pred, type = 'scatter', mode = 'lines', 
            name = 'Laktat Modellfunktion', 
            line = list(color = '#62A39F', width = 3)) %>%
  add_annotations(text = sprintf("ΔBLC = %.5f * e<sup>(%.5f * Leistung)", coef_exponential_model['a'], coef_exponential_model['b']),
                  x = min(df_proband$Leistung), y = max(y_pred), showarrow = FALSE,
                  xanchor = 'left', yanchor = 'bottom',
                  font = list(family = "Arial, sans-serif", size = 12, color = "black")) %>%
  add_trace(x = ~df_proband$Leistung[3], y = ~ΔBLC_Belastung_1, type = 'scatter', mode = 'markers',
            name = 'ΔBLC: Belastung 1', 
            marker = list(color = "#EF5350", size = 8.0)) %>%
  add_annotations(text = sprintf("ΔBLC<sub>1</sub> = %.2f mmol/l", ΔBLC_Belastung_1 ),
                  x = min(df_proband$Leistung), y = max(y_pred) * 0.93, showarrow = FALSE,
                  xanchor = 'left', yanchor = 'bottom',
                  font = list(family = "Arial, sans-serif", size = 12, color = "black")) %>%
  layout(
    title = paste("Proband:", prefix, "- BLC-Anstieg"),
    margin = list(t = 40),
    xaxis = list(title = "Leistung"),
    yaxis = list(title = "ΔBLC")
  )
```

### Proband 20

```{r}
BLC_Diagramme_list <- list()
prefix <- '20'
values <- Modellwerte_list[[as.character(prefix)]]
df_proband <- values$df_proband
y_pred_proband <- values$y_pred_proband
x_seq <- values$x_seq
y_pred <- values$y_pred
ΔBLC_Belastung_1 <- values$ΔBLC_Belastung_1
coef_exponential_model <- values$coef_exponential_model
# Verwenden Sie das temporäre Verzeichnis für Plotly-Dateien
plot_ly() %>%
  add_trace(data = df_proband, x = ~Leistung, y = ~ΔBLC, type = 'scatter', mode = 'markers',
            name = paste("ΔBLC mmol/l"),
            marker = list(color = "#2683C6", size = 7.0)) %>%
  add_trace(x = ~x_seq, y = ~y_pred, type = 'scatter', mode = 'lines', 
            name = 'Laktat Modellfunktion', 
            line = list(color = '#62A39F', width = 3)) %>%
  add_annotations(text = sprintf("ΔBLC = %.5f * e<sup>(%.5f * Leistung)", coef_exponential_model['a'], coef_exponential_model['b']),
                  x = min(df_proband$Leistung), y = max(y_pred), showarrow = FALSE,
                  xanchor = 'left', yanchor = 'bottom',
                  font = list(family = "Arial, sans-serif", size = 12, color = "black")) %>%
  add_trace(x = ~df_proband$Leistung[3], y = ~ΔBLC_Belastung_1, type = 'scatter', mode = 'markers',
            name = 'ΔBLC: Belastung 1', 
            marker = list(color = "#EF5350", size = 8.0)) %>%
  add_annotations(text = sprintf("ΔBLC<sub>1</sub> = %.2f mmol/l", ΔBLC_Belastung_1 ),
                  x = min(df_proband$Leistung), y = max(y_pred) * 0.93, showarrow = FALSE,
                  xanchor = 'left', yanchor = 'bottom',
                  font = list(family = "Arial, sans-serif", size = 12, color = "black")) %>%
  layout(
    title = paste("Proband:", prefix, "- BLC-Anstieg"),
    margin = list(t = 40),
    xaxis = list(title = "Leistung"),
    yaxis = list(title = "ΔBLC")
  )
```

### Proband 22

```{r}
BLC_Diagramme_list <- list()
prefix <- '22'
values <- Modellwerte_list[[as.character(prefix)]]
df_proband <- values$df_proband
y_pred_proband <- values$y_pred_proband
x_seq <- values$x_seq
y_pred <- values$y_pred
ΔBLC_Belastung_1 <- values$ΔBLC_Belastung_1
coef_exponential_model <- values$coef_exponential_model
# Verwenden Sie das temporäre Verzeichnis für Plotly-Dateien
plot_ly() %>%
  add_trace(data = df_proband, x = ~Leistung, y = ~ΔBLC, type = 'scatter', mode = 'markers',
            name = paste("ΔBLC mmol/l"),
            marker = list(color = "#2683C6", size = 7.0)) %>%
  add_trace(x = ~x_seq, y = ~y_pred, type = 'scatter', mode = 'lines', 
            name = 'Laktat Modellfunktion', 
            line = list(color = '#62A39F', width = 3)) %>%
  add_annotations(text = sprintf("ΔBLC = %.5f * e<sup>(%.5f * Leistung)", coef_exponential_model['a'], coef_exponential_model['b']),
                  x = min(df_proband$Leistung), y = max(y_pred), showarrow = FALSE,
                  xanchor = 'left', yanchor = 'bottom',
                  font = list(family = "Arial, sans-serif", size = 12, color = "black")) %>%
  add_trace(x = ~df_proband$Leistung[3], y = ~ΔBLC_Belastung_1, type = 'scatter', mode = 'markers',
            name = 'ΔBLC: Belastung 1', 
            marker = list(color = "#EF5350", size = 8.0)) %>%
  add_annotations(text = sprintf("ΔBLC<sub>1</sub> = %.2f mmol/l", ΔBLC_Belastung_1 ),
                  x = min(df_proband$Leistung), y = max(y_pred) * 0.93, showarrow = FALSE,
                  xanchor = 'left', yanchor = 'bottom',
                  font = list(family = "Arial, sans-serif", size = 12, color = "black")) %>%
  layout(
    title = paste("Proband:", prefix, "- BLC-Anstieg"),
    margin = list(t = 40),
    xaxis = list(title = "Leistung"),
    yaxis = list(title = "ΔBLC")
  )
```

### Proband 23

```{r}
BLC_Diagramme_list <- list()
prefix <- '23'
values <- Modellwerte_list[[as.character(prefix)]]
df_proband <- values$df_proband
y_pred_proband <- values$y_pred_proband
x_seq <- values$x_seq
y_pred <- values$y_pred
ΔBLC_Belastung_1 <- values$ΔBLC_Belastung_1
coef_exponential_model <- values$coef_exponential_model
# Verwenden Sie das temporäre Verzeichnis für Plotly-Dateien
plot_ly() %>%
  add_trace(data = df_proband, x = ~Leistung, y = ~ΔBLC, type = 'scatter', mode = 'markers',
            name = paste("ΔBLC mmol/l"),
            marker = list(color = "#2683C6", size = 7.0)) %>%
  add_trace(x = ~x_seq, y = ~y_pred, type = 'scatter', mode = 'lines', 
            name = 'Laktat Modellfunktion', 
            line = list(color = '#62A39F', width = 3)) %>%
  add_annotations(text = sprintf("ΔBLC = %.5f * e<sup>(%.5f * Leistung)", coef_exponential_model['a'], coef_exponential_model['b']),
                  x = min(df_proband$Leistung), y = max(y_pred), showarrow = FALSE,
                  xanchor = 'left', yanchor = 'bottom',
                  font = list(family = "Arial, sans-serif", size = 12, color = "black")) %>%
  add_trace(x = ~df_proband$Leistung[3], y = ~ΔBLC_Belastung_1, type = 'scatter', mode = 'markers',
            name = 'ΔBLC: Belastung 1', 
            marker = list(color = "#EF5350", size = 8.0)) %>%
  add_annotations(text = sprintf("ΔBLC<sub>1</sub> = %.2f mmol/l", ΔBLC_Belastung_1 ),
                  x = min(df_proband$Leistung), y = max(y_pred) * 0.93, showarrow = FALSE,
                  xanchor = 'left', yanchor = 'bottom',
                  font = list(family = "Arial, sans-serif", size = 12, color = "black")) %>%
  layout(
    title = paste("Proband:", prefix, "- BLC-Anstieg"),
    margin = list(t = 40),
    xaxis = list(title = "Leistung"),
    yaxis = list(title = "ΔBLC")
  )
```


# Datensätze

## Datensätze {.tabset}

### "Haupt" - Datensatz

```{r message=FALSE, warning=FALSE}

# Nur auf numerische Spalten anwenden
numerische_spalten <- sapply(Bedingungen_data, is.numeric)
Bedingungen_data[numerische_spalten] <- lapply(Bedingungen_data[numerische_spalten], function(x) round(x, 2))
# Datentabelle anzeigen
datatable(Bedingungen_data, options = list(pageLength = 10))

```

### Ergometer - Datensatz

```{r message=FALSE, warning=FALSE}
# Nur auf numerische Spalten anwenden
numerische_spalten <- sapply(Erg_data_komplett, is.numeric)
Erg_data_komplett[numerische_spalten] <- lapply(Erg_data_komplett[numerische_spalten], function(x) round(x, 2))
# Datentabelle anzeigen
datatable(Erg_data_komplett, options = list(pageLength = 10))

```

### EPOC - Datensatz

```{r message=FALSE, warning=FALSE}
# Nur auf numerische Spalten anwenden
numerische_spalten <- sapply(EPOC_data_df, is.numeric)
EPOC_data_df[numerische_spalten] <- lapply(EPOC_data_df[numerische_spalten], function(x) round(x, 2))
# Datentabelle anzeigen
datatable(EPOC_data_df, options = list(pageLength = 10))

```

### Messwerte_Bedingungen - Datensatz

```{r message=FALSE, warning=FALSE}
# Nur auf numerische Spalten anwenden
numerische_spalten <- sapply(Messwerte_Bedingungen_df, is.numeric)
Messwerte_Bedingungen_df[numerische_spalten] <- lapply(Messwerte_Bedingungen_df[numerische_spalten], function(x) round(x, 2))
# Datentabelle anzeigen
datatable(Messwerte_Bedingungen_df, options = list(pageLength = 10))

```

### Messwerte_Intensitäten - Datensatz

```{r message=FALSE, warning=FALSE}
# Nur auf numerische Spalten anwenden
numerische_spalten <- sapply(Messwerte_Intensitäten_df, is.numeric)
Messwerte_Intensitäten_df[numerische_spalten] <- lapply(Messwerte_Intensitäten_df[numerische_spalten], function(x) round(x, 2))
# Datentabelle anzeigen
datatable(Messwerte_Intensitäten_df, options = list(pageLength = 10))

```

### Messwerte_Bedingung_Intensität - Datensatz

```{r message=FALSE, warning=FALSE}
# Nur auf numerische Spalten anwenden
numerische_spalten <- sapply(Messwerte_Bedingung_Intensität_df, is.numeric)
Messwerte_Bedingung_Intensität_df[numerische_spalten] <- lapply(Messwerte_Bedingung_Intensität_df[numerische_spalten], function(x) round(x, 2))
# Datentabelle anzeigen
datatable(Messwerte_Bedingung_Intensität_df, options = list(pageLength = 10))

```

### Efficiency - Datensatz

```{r message=FALSE, warning=FALSE}
# Nur auf numerische Spalten anwenden
numerische_spalten <- sapply(Efficiency_df, is.numeric)
Efficiency_df[numerische_spalten] <- lapply(Efficiency_df[numerische_spalten], function(x) round(x, 2))
# Datentabelle anzeigen
datatable(Efficiency_df, options = list(pageLength = 10))

```


>>>>>>> 05c0c7f8e2cc4e7baa4c41ff161fad54de14fadd
