---
format: 
  dashboard:
    expandable: true
    scrolling: true 

theme: 
  - yeti
---





## Bar - und Boxplots {.tabset}



```{r}
# Library und dfs laden
library(plotly)
library(ggplot2)
library(dplyr)
library(tidyr)
library(htmltools)
library(htmlwidgets)
library(shiny)
library(DT)
library(RColorBrewer)
library(patchwork)
library(minpack.lm)
library(zoo)
library(purrr)
library(readxl)

# Laden des DataFrames EPOC_data, Erg_data und BLC_data aus der RDS-Datei
EPOC_data_df <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/EPOC_data_df.rds")
Erg_data_df <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/Erg_data_df.rds")
Erg_data_komplett <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/Erg_data_komplett.rds")
Messwerte_Bedingungen_df <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/Messwerte_Bedingungen_df.rds")
Messwerte_Intensitäten_df <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/Messwerte_Intensitäten_df.rds")
Messwerte_Bedingung_Intensität_df <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/Messwerte_Bedingung_Intensität_df.rds")
Bedingungen_data <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/Bedingungen_data.rds")
P_Ges_df<- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/Efficiency_Daten_df.rds")
Efficiency_df<- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/Efficiency_Daten_df.rds")
P_Int_Drehzahl_Masse <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/P_Int_Drehzahl_Masse.rds")
Simulation_df <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/Simulation_df.rds")
ΔBLC_list <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/BLC_list.rds")
proband_data <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/proband_data.rds")
ΔBLC_data_df <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/BLC_data_df.rds")
BLC_Modell_list <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/BLC_Modell_list.rds")
Efficiency_Daten_df <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/Efficiency_Daten_df.rds")
P_R_list <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/P_R_list.rds")
P_L_list <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/P_L_list.rds")
start_vals_list <- readRDS ("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/start_vals_list.rds")
VO2_list <- readRDS ("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/VO2_list.rds")
df_anthropometrisch_female <- readRDS ("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/df_anthropometrisch_female.rds")
df_anthropometrisch_male <- readRDS ("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/df_anthropometrisch_male.rds")
```

### Datentabelle

```{r}
##### Tabelle außerhalb von Shiny #######

# Angenommene statische Filterkriterien
selectedBedingung <- unique(Bedingungen_data$Bedingung)
selectedIntensität <- unique(Bedingungen_data$Intensität)
selectedProband <- unique(Bedingungen_data$Proband)

# Datenfilterung basierend auf den festgelegten Kriterien
filtered_data <- Bedingungen_data %>%
  filter(Bedingung %in% selectedBedingung,
         Intensität %in% selectedIntensität,
         Proband %in% selectedProband)

# Daten umwandeln und Durchschnittswerte berechnen für die Energiequellen
avg_energy_data <- filtered_data %>%
  group_by(Bedingung, Intensität) %>%
  summarise(
    W_aerob = sprintf("%.1f kJ", round(mean(`W*Aerob [kJ]`, na.rm = TRUE), 1)),
    W_BLC = sprintf("%.1f kJ", round(mean(`WBLC [kJ]`, na.rm = TRUE), 1)),
    W_PCR = sprintf("%.1f kJ", round(mean(`WPCR [kJ]`, na.rm = TRUE), 1)),
    W_TOT = sprintf("%.1f kJ", round(mean(`W*Aerob [kJ]` + `WBLC [kJ]` + `WPCR [kJ]`, na.rm = TRUE), 1)),
    P_mean = sprintf("%.1f Watt", round(mean(P_mean, na.rm = TRUE), 1)),
    P_Int = sprintf("%.1f Watt", round(mean(P_Int, na.rm = TRUE), 1)),
    Drehzahl = sprintf("%.1f rpm", mean(nD, na.rm = TRUE)),
    Wirkungsgrad = sprintf("%.2f%%", 100 * mean(WirkPhysio, na.rm = TRUE)),
    Efficiency = sprintf("%.2f%%", mean(Efficiency, na.rm = TRUE)),
    `Pedal Smoothness` = sprintf("%.2f%%", mean(Pedal_Smoothness, na.rm = TRUE)),
    `P_max` = sprintf("%.1f Watt", mean(P_max, na.rm = TRUE)),
    `%HRmax` = sprintf("%.1f%%", mean(HR_percent, na.rm = TRUE)),
    `%VO2max%` = sprintf("%.1f%%", mean(VO2_percent, na.rm = TRUE)),
    `ΔBLC` = sprintf("%.1f mmol/L", mean(`ΔBLC`, na.rm = TRUE))
  ) %>%
  ungroup()

# Erstellen der Tabelle
datatable(avg_energy_data)
```

### Barplots - Wirkungsgrad

```{r}



#  leicht_sitzen zuerst
sort_with_leicht_sitzen_first <- function(x) {
  leicht_sitzen <- "leicht_sitzen"
  if (leicht_sitzen %in% x) {
    return(c(leicht_sitzen, setdiff(x, leicht_sitzen)))
  }
  return(x)
}

# Angenommen, Sie wollen für alle Bedingungen, Intensitäten und Probanden plotten:
selectedBedingung <- unique(Bedingungen_data$Bedingung)
selectedIntensität <- unique(Bedingungen_data$Intensität)
selectedProband <- unique(Bedingungen_data$Proband)

# Datenfilterung ohne reaktiven Kontext
filtered_data <- Bedingungen_data %>%
  filter(Bedingung %in% selectedBedingung,
         Intensität %in% selectedIntensität,
         Proband %in% selectedProband)

# Berechnen des durchschnittlichen Wirkungsgrads
avg_efficiency_data <- filtered_data %>%
  group_by(Bedingung, Intensität) %>%
  summarize(AvgWirkungsgrad = mean(WirkPhysio, na.rm = TRUE))

# Berechnen der durchschnittlichen Leistung
avg_power_data <- filtered_data %>%
  group_by(Bedingung, Intensität) %>%
  summarize(AvgPTOT = mean(`P_Tot`, na.rm = TRUE))

# Daten umwandeln und Durchschnittswerte berechnen
avg_energy_data <- filtered_data %>%
  gather(Energiequelle, Wert, `W*Aerob [kJ]`, `WPCR [kJ]`, `WBLC [kJ]`) %>%
  group_by(Bedingung, Intensität, Energiequelle) %>%
  summarize(AvgWert = mean(Wert, na.rm = TRUE),
            AvgWTOT = mean(`WTOT [kJ]`, na.rm = TRUE),
            Prozentsatz = (AvgWert / AvgWTOT) * 100)

# Sortierung für die x-Achse
categories <- sort_with_leicht_sitzen_first(unique(interaction(filtered_data$Intensität, filtered_data$Bedingung, sep = "_")))

# Erstellen des Plotly-Diagramms
p <- plot_ly(data = avg_energy_data, 
             x = ~interaction(Intensität, Bedingung, sep = "_"), 
             y = ~AvgWert, 
             color = ~Energiequelle, 
             type = 'bar',
             marker = list(line = list(color = 'black', width = 0.75)),
             colors = c("#42BA97","#F4737A", "#1CADE4"),
             text = ~sprintf("%.1f%%", Prozentsatz),
             textposition = "auto",
             textfont = list(color = "black")
) %>%
  layout(
    title = 'Durchschnittlicher Energieverbrauch der ausgewählten Probanden nach Intensität und Bedingung',
    xaxis = list(title = 'Intensität_Bedingung',
                 categoryorder = "array",
                 categoryarray = categories,
                 showgrid = TRUE,
                 gridcolor = "lightgray",
                 gridwidth = 0.05),
    yaxis = list(title = 'Durchschnittliche Energie [kJ]', tickformat = ",.0f",
                 showgrid = TRUE,
                 gridcolor = "lightgray",
                 gridwidth = 0.05,
                 range = c(0, 520)),
    barmode = 'stack',
    bargap = 0.4,
    margin = list(t = 40) 
  )
# Wirkungsgradbeschriftung (über Summe der Balken)
p <- p %>% 
  layout(annotations = c(
    lapply(1:nrow(avg_efficiency_data), function(i) {
      list(
        x = interaction(avg_efficiency_data$Intensität[i], avg_efficiency_data$Bedingung[i], sep = "_"),
        y = sum(avg_energy_data$AvgWert[
          avg_energy_data$Intensität == avg_efficiency_data$Intensität[i] & 
            avg_energy_data$Bedingung == avg_efficiency_data$Bedingung[i] &
            (avg_energy_data$Energiequelle == "WPCR [kJ]" | 
               avg_energy_data$Energiequelle == "W*Aerob [kJ]" | 
               avg_energy_data$Energiequelle == "WBLC [kJ]")
        ]) + 15,  
        text = sprintf("η = %.3f", avg_efficiency_data$AvgWirkungsgrad[i]),
        showarrow = FALSE,
        yshift = 0,  
        xshift = 0,
        xanchor = "center",
        yanchor = "bottom",
        font = list(size = 12),
        bgcolor = "white",
        bordercolor = "black",
        borderpad = 4
      )
    })
  ))

# Durchschnittliche Leistung beschriften
p <- p %>%
  layout(annotations = c(p$x$layout$annotations,
                         lapply(1:nrow(avg_power_data), function(i) {
                           list(
                             x = interaction(avg_power_data$Intensität[i], avg_power_data$Bedingung[i], sep = "_"),
                             y = 0,  # Positionieren Sie die Annotation direkt über der x-Achse
                             text = sprintf("P<sub>TOT</sub> = %.0f W", avg_power_data$AvgPTOT[i]),
                             showarrow = FALSE,
                             yshift = 0,  # Ändern Sie diese Einstellung, um die vertikale Position anzupassen
                             xshift = 0,
                             xanchor = "center",
                             yanchor = "bottom",
                             font = list(size = 11), # Schriftart, Farbe und Größe anpassen
                             borderpad = 4
                           )
                         })
  ))

# Anzeigen des Plots
p

```

### Boxplots {.tabset}

#### Boxplots_Probanden_Wirkungsgrad

```{r}

# Laden Sie den DataFrame aus der RDS-Datei
Bedingungen_data <- readRDS("C:/Users/johan/OneDrive/Desktop/SpoWi/WS 22,23/Masterarbeit - Wirkungsgrad/Daten/Probanden_Energieberechnung/xlsm/Bedingungen_data.rds")

# Einzigartige Werte in der Spalte "Proband" ausgeben und sortieren
unique_values <- sort(unique(Bedingungen_data$Proband))
# Erstellen Sie eine neue Spalte 'ProbandNum', die eine fortlaufende Nummerierung für jeden einzigartigen 'Proband' enthält
Bedingungen_data <- Bedingungen_data %>%
  mutate(ProbandNum = as.numeric(factor(Proband)))
# Einzigartige Werte in der neuen Spalte 'ProbandNum' ausgeben und sortieren
unique_values_num <- sort(unique(Bedingungen_data$ProbandNum))
# Farben für die Boxen
box_colors <- colorRampPalette(brewer.pal(10, "Spectral"))(length(unique_values_num))

# Erstellen Sie den Plot mit Plotly
p <- plot_ly(data = Bedingungen_data, x = ~WirkPhysio, y = ~ProbandNum, type = "box", orientation = 'h',
             color = ~factor(Proband), colors = box_colors) %>%
  layout(
    xaxis = list(title = "WirkPhysio"),
    yaxis = list(
      title = "Proband",
      tickvals = unique_values_num,
      ticktext = sort(unique(Bedingungen_data$Proband))
    ),
    margin = list(t = 40),
    showlegend = FALSE,
    title = "Wirkungsgrad der Probanden"  # Hier wird der Titel hinzugefügt
  ) %>%
  config(displayModeBar = FALSE)

# Hinzufügen der Marker
for (i in 1:length(unique_values_num)) {
  p <- p %>%
    add_trace(
      data = subset(Bedingungen_data, ProbandNum == unique_values_num[i]),
      x = ~WirkPhysio,
      y = ~ProbandNum,
      type = "scatter",
      mode = "markers",
      marker = list(
        size = 8,  
        opacity = 1.0, 
        color = box_colors[i],
        symbol = ifelse(Bedingungen_data$Bedingung == "stehen", "star", "circle"), # Symbole für 'stehen'
        line = list(
          width = 0.05  # Dünne Linien für die Symbole
        )
      ),
      text = ~paste("Proband: ", Proband, "<br>WirkPhysio: ", WirkPhysio)
    )
}
# Legende
p <- p %>%
  layout(
    showlegend = FALSE,
    annotations = list(
      list(
        x = 0.99,
        y = 1.0,
        xref = 'paper',
        yref = 'paper',
        text = '<span style="color:darkgray;"><b>  &#9733;</b> Stehen<br><b> &#9711;</b> Sitzen</span>',
        showarrow = FALSE
      )
    )
  )

# Anzeigen des Plots
p



```

#### Boxplots_Wirkungsgrad - Intensität x Bedingung

```{r}
######## Intensität x Bedingung #########
sort_with_leicht_sitzen_first <- function(x) {
  leicht_sitzen <- "leicht_sitzen"
  if (leicht_sitzen %in% x) {
    return(c(leicht_sitzen, setdiff(x, leicht_sitzen)))
  }
  return(x)
}

# Farben definieren 
colors <- case_when(
  interaction(Bedingungen_data$Intensität, Bedingungen_data$Bedingung, sep = "_") == "leicht_sitzen" ~ "#42BA97",
  interaction(Bedingungen_data$Intensität, Bedingungen_data$Bedingung, sep = "_") == "leicht_stehen" ~ "#62A39F",
  interaction(Bedingungen_data$Intensität, Bedingungen_data$Bedingung, sep = "_") == "moderat_sitzen" ~ "#1CADE4",
  interaction(Bedingungen_data$Intensität, Bedingungen_data$Bedingung, sep = "_") == "moderat_stehen" ~ "#2683C6",
  interaction(Bedingungen_data$Intensität, Bedingungen_data$Bedingung, sep = "_") == "schwer_sitzen" ~ "#EF5350",
  interaction(Bedingungen_data$Intensität, Bedingungen_data$Bedingung, sep = "_") == "schwer_stehen" ~ "#C8133B",
  TRUE ~ NA_character_  # Für alle anderen Fälle
)

# Plotly Boxplot erstellen
p2BxI <- plot_ly(data = Bedingungen_data, 
                 x = ~interaction(Intensität, Bedingung, sep = "_"), 
                 y = ~WirkPhysio,
                 type = "box",
                 fillcolor = colors,
                 opacity = 0.8, 
                 line = list(color = "black", width = 0.9),
                 name = ~interaction(Intensität, Bedingung, sep = "_"),
                 boxpoints = "outliers",  
                 pointpos = 0,
                 marker = list(color = "black", size = 4),
                 boxmean = TRUE,  
                 hoverlabel = list(bgcolor = "#F5F5F5")
) %>%
  layout(title = list(
    text = 'Wirkungsgrad nach Bedingung und Intensität',
    x = 0.5,  # Titel zentriert
    xanchor = 'center',  # Ankerpunkt in der Mitte
    yanchor = 'top'  # Ankerpunkt oben
  ),
  margin = list(t = 40),  # Margin von 40 oben
  xaxis = list(title = htmltools::HTML('<b>Intensität_Bedingung</b>'), 
               categoryorder = "array",
               categoryarray = sort_with_leicht_sitzen_first(unique(interaction(Bedingungen_data$Intensität, Bedingungen_data$Bedingung, sep = "_"))),
               showgrid = TRUE,  
               gridcolor = "lightgray",  
               gridwidth = 0.05),  
  yaxis = list(title = htmltools::HTML('<b>Wirkungsgrad</b>'), tickformat = ".3f",
               showgrid = TRUE,  
               gridcolor = "lightgray",  
               gridwidth = 0.05) 
  )
# Diagramm anzeigen
p2BxI

```

#### Boxplots_Wirkungsgrad - Intensitäten

```{r}
######## Intensität #########

# Farben definieren 
colors <- case_when(
  Bedingungen_data$Intensität == "leicht" ~ "#42BA97",
  Bedingungen_data$Intensität == "moderat" ~ "#1CADE4",
  Bedingungen_data$Intensität == "schwer" ~ "#EF5350",
  TRUE ~ NA_character_  # Für alle anderen Fälle
)

# Plotly Boxplot erstellen
p2I <- plot_ly(data = Bedingungen_data, 
               x = ~Intensität, 
               y = ~WirkPhysio,
               type = "box",
               fillcolor = colors,
               opacity = 0.8, 
               line = list(color = "black", width = 0.9),
               name = ~Intensität,
               boxpoints = "outliers",  
               pointpos = 0,
               marker = list(color = "black", size = 4),
               boxmean = TRUE,  
               hoverlabel = list(bgcolor = "#F5F5F5")
) %>%
  layout(title = list(
    text = 'Wirkungsgrad der Probanden nach Intensität',
    x = 0.5,  # Titel zentriert
    xanchor = 'center',  # Ankerpunkt in der Mitte
    yanchor = 'top'  # Ankerpunkt oben
  ),
  margin = list(t = 40),  # Margin von 40 oben
  xaxis = list(title = htmltools::HTML('<b>Intensität</b>'), 
               showgrid = TRUE,  
               gridcolor = "lightgray",  
               gridwidth = 0.05),  
  yaxis = list(title = htmltools::HTML('<b>Wirkungsgrad</b>'), tickformat = ".3f",
               showgrid = TRUE,  
               gridcolor = "lightgray",  
               gridwidth = 0.05)  
  )

# Diagramm anzeigen
p2I


```

#### Boxplots_Wirkungsgrad - Bedingungen

```{r}


######## Bedingung #########
# Farben definieren 
colors <- case_when(
  Bedingungen_data$Bedingung == "sitzen" ~ "#1CADE4",
  Bedingungen_data$Bedingung == "stehen" ~ "#42BA97",
  TRUE ~ NA_character_  # Für alle anderen Fälle
)

# Plotly Boxplot erstellen
p2B <- plot_ly(data = Bedingungen_data, 
               x = ~Bedingung, 
               y = ~WirkPhysio,
               type = "box",
               fillcolor = colors,
               opacity = 0.8, 
               line = list(color = "black", width = 0.9),
               name = ~Bedingung,
               boxpoints = "outliers",  
               pointpos = 0,
               marker = list(color = "black", size = 4),
               boxmean = TRUE,  
               hoverlabel = list(bgcolor = "#F5F5F5")
) %>%
  layout(title = list(
    text = 'Wirkungsgrad der Probanden nach Bedingung',
    x = 0.5,  # Titel zentriert
    xanchor = 'center',  # Ankerpunkt in der Mitte
    yanchor = 'top'  # Ankerpunkt oben
  ),
  margin = list(t = 40),  # Margin von 40 oben
  xaxis = list(title = htmltools::HTML('<b>Bedingung</b>'), 
               showgrid = TRUE,  
               gridcolor = "lightgray",  
               gridwidth = 0.05),  
  yaxis = list(title = htmltools::HTML('<b>Wirkungsgrad</b>'), tickformat = ".3f",
               showgrid = TRUE,  
               gridcolor = "lightgray",  
               gridwidth = 0.05)  
  )

# Diagramm anzeigen
p2B




```

### Regressions - Plots {.tabset}

#### Wirkungsgrad x Watt/kg

```{r}
### WirkPhysio vs. W_kg ###

# Lineare Regression und Modellzusammenfassung
lin_reg <- lm(WirkPhysio ~ W_kg, data = Bedingungen_data)
summary_lin_reg <- summary(lin_reg)
f_stat <- summary_lin_reg$fstatistic
p_value <- format.pval(pf(f_stat["value"], f_stat["numdf"], f_stat["dendf"], lower.tail = FALSE), digits = 4)
equation_text <- sprintf("y = %.2fx + %.2f", coef(lin_reg)["W_kg"], coef(lin_reg)["(Intercept)"])
r_squared_text <- sprintf("R² = %.2f", summary_lin_reg$r.squared)
f_stat_text <- sprintf("F (%d, %d) = %.2f, p = %s", f_stat["numdf"], f_stat["dendf"], f_stat["value"], p_value)

# Berechnung der Regressionsgeraden
w_kg_seq <- seq(min(Bedingungen_data$W_kg), max(Bedingungen_data$W_kg), length.out = 100)
regression_values <- predict(lin_reg, newdata = data.frame(W_kg = w_kg_seq))

# Erstellen des Plotly-Diagramms
plot_ly() %>%
  add_markers(data = Bedingungen_data, x = ~W_kg, y = ~WirkPhysio, type = 'scatter', mode = 'markers',
              color = ~factor(Proband), colors = colorRampPalette(brewer.pal(10,"Spectral"))(20),
              marker = list(size = 9, opacity = 0.8)) %>%
  layout(title = "WirkPhysio vs. W_kg",
         margin = list(t = 40),
         xaxis = list(title = "W_kg"),
         yaxis = list(title = "WirkPhysio")) %>%
  add_lines(x = ~w_kg_seq, y = ~regression_values, name = "Regressionslinie", line = list(color = 'darkgrey', width = 2)) %>%
  add_annotations(text = equation_text, x = min(Bedingungen_data$W_kg), y = max(Bedingungen_data$WirkPhysio), 
                  showarrow = FALSE, xanchor = 'left', yanchor = 'bottom') %>%
  add_annotations(text = r_squared_text, x = min(Bedingungen_data$W_kg), y = max(Bedingungen_data$WirkPhysio) * 0.98, 
                  showarrow = FALSE, xanchor = 'left', yanchor = 'bottom') %>%
  add_annotations(text = f_stat_text, x = min(Bedingungen_data$W_kg), y = max(Bedingungen_data$WirkPhysio) * 0.96, 
                  showarrow = FALSE, xanchor = 'left', yanchor = 'bottom')
```

#### VO2_kg_max x Watt/kg

```{r}
### VO2_kg_max vs. W_kg ###

# Erstellen eines Dataframes mit Durchschnittswerten pro Proband
proband_means <- aggregate(Bedingungen_data[, c("VO2_kg_max", "W_kg")], by = list(Bedingungen_data$Proband), FUN = mean)
names(proband_means) <- c("Proband", "Durchschnitt_VO2_kg_max", "Durchschnitt_W_kg")

# Lineare Regression und Modellzusammenfassung
lin_reg <- lm(Durchschnitt_VO2_kg_max ~ Durchschnitt_W_kg, data = proband_means)
summary_lin_reg <- summary(lin_reg)
f_stat <- summary_lin_reg$fstatistic
p_value <- format.pval(pf(f_stat["value"], f_stat["numdf"], f_stat["dendf"], lower.tail = FALSE), digits = 4)
equation_text <- sprintf("y = %.2fx + %.2f", coef(lin_reg)["Durchschnitt_W_kg"], coef(lin_reg)["(Intercept)"])
r_squared_text <- sprintf("R² = %.2f", summary_lin_reg$r.squared)
f_stat_text <- sprintf("F (%d, %d) = %.2f, p = %s", f_stat["numdf"], f_stat["dendf"], f_stat["value"], p_value)

# Berechnung der Regressionsgeraden
durchschnitt_w_kg_seq <- seq(min(proband_means$Durchschnitt_W_kg), max(proband_means$Durchschnitt_W_kg), length.out = 100)
regression_values <- predict(lin_reg, newdata = data.frame(Durchschnitt_W_kg = durchschnitt_w_kg_seq))

# Erstellen des Plotly-Diagramms
plot_ly() %>%
  add_markers(data = proband_means, x = ~Durchschnitt_W_kg, y = ~Durchschnitt_VO2_kg_max, type = 'scatter', mode = 'markers',
              color = ~factor(Proband), colors = colorRampPalette(brewer.pal(10, "Spectral"))(20),
              marker = list(size = 9, opacity = 0.8)) %>%
  layout(title = "Durchschnitt_VO2_kg_max vs. Durchschnitt_W_kg",
         margin = list(t = 40),
         xaxis = list(title = "Durchschnitt_W_kg"),
         yaxis = list(title = "Durchschnitt_VO2_kg_max")) %>%
  add_lines(x = ~durchschnitt_w_kg_seq, y = ~regression_values, name = "Regressionslinie", line = list(color = 'darkgrey', width = 2)) %>%
  add_annotations(text = equation_text, x = min(proband_means$Durchschnitt_W_kg), y = max(proband_means$Durchschnitt_VO2_kg_max), 
                  showarrow = FALSE, xanchor = 'left', yanchor = 'bottom') %>%
  add_annotations(text = r_squared_text, x = min(proband_means$Durchschnitt_W_kg), y = max(proband_means$Durchschnitt_VO2_kg_max) * 0.98, 
                  showarrow = FALSE, xanchor = 'left', yanchor = 'bottom') %>%
  add_annotations(text = f_stat_text, x = min(proband_means$Durchschnitt_W_kg), y = max(proband_means$Durchschnitt_VO2_kg_max) * 0.96, 
                  showarrow = FALSE, xanchor = 'left', yanchor = 'bottom')
```
